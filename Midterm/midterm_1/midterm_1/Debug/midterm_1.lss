
midterm_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001b6  008001b6  000007ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de6  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a20  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000462  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000024d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000516  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037f  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002de5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e6       	ldi	r30, 0x64	; 100
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 3b       	cpi	r26, 0xB6	; 182
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 eb       	ldi	r26, 0xB6	; 182
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 3b       	cpi	r26, 0xB7	; 183
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  ea:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  f8:	85 e8       	ldi	r24, 0x85	; 133
  fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  fe:	08 95       	ret

00000100 <USART_init>:
 100:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 110:	88 e1       	ldi	r24, 0x18	; 24
 112:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 11c:	08 95       	ret

0000011e <USART_transmit>:

void USART_transmit(unsigned char data) {			// Function to transmit ASCII value into UDR0
	while (!(UCSR0A & (1 << UDRE0)));			// Keep Checking until  UDRE0 data register 'High' to break loop
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	95 ff       	sbrs	r25, 5
 126:	fd cf       	rjmp	.-6      	; 0x122 <USART_transmit+0x4>
	UDR0 = data;								// Store unsigned char serial data into UDR0
 128:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 12c:	08 95       	ret

0000012e <USART_tx_string>:
}


void USART_tx_string(char* data)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	while(*data != 0x00)
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	31 f0       	breq	.+12     	; 0x146 <USART_tx_string+0x18>
 13a:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_transmit(*data);
 13c:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_transmit>
}


void USART_tx_string(char* data)
{
	while(*data != 0x00)
 140:	89 91       	ld	r24, Y+
 142:	81 11       	cpse	r24, r1
 144:	fb cf       	rjmp	.-10     	; 0x13c <USART_tx_string+0xe>
//ISR(TIMER1_OVF_vect)
//{
	//OVF_COUNT++; //increment the overflow counter
	//if (OVF_COUNT == OVF_LIMIT) //check to see if the limit was reached
	//{
		ADCSRA|=(1<<ADSC);	//start conversion
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 150:	80 81       	ld	r24, Z
 152:	84 ff       	sbrs	r24, 4
 154:	fd cf       	rjmp	.-6      	; 0x150 <USART_tx_string+0x22>
		
		ADCSRA |= (1<<ADIF);
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 61       	ori	r24, 0x10	; 16
 15e:	80 83       	st	Z, r24

		int a = ADCL;
 160:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
		a = a | (ADCH<<8);
 164:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		a = (a/1024.0) * 5000/10;
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	78 2b       	or	r23, r24
 16c:	07 2e       	mov	r0, r23
 16e:	00 0c       	add	r0, r0
 170:	88 0b       	sbc	r24, r24
 172:	99 0b       	sbc	r25, r25
 174:	0e 94 0f 02 	call	0x41e	; 0x41e <__floatsisf>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e8       	ldi	r20, 0x80	; 128
 17e:	5a e3       	ldi	r21, 0x3A	; 58
 180:	0e 94 9b 02 	call	0x536	; 0x536 <__mulsf3>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e4       	ldi	r19, 0x40	; 64
 188:	4c e9       	ldi	r20, 0x9C	; 156
 18a:	55 e4       	ldi	r21, 0x45	; 69
 18c:	0e 94 9b 02 	call	0x536	; 0x536 <__mulsf3>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e2       	ldi	r20, 0x20	; 32
 196:	51 e4       	ldi	r21, 0x41	; 65
 198:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divsf3>
		a = (a*2)+32; //equation to convert celsius to farenheit. can't use used 2 instead of 9/5
 19c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fixsfsi>
 1a0:	60 5f       	subi	r22, 0xF0	; 240
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	eb 01       	movw	r28, r22
 1a6:	cc 0f       	add	r28, r28
 1a8:	dd 1f       	adc	r29, r29
			
		
		
		USART_tx_string("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");	// Connect API KEy
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	89 e6       	ldi	r24, 0x69	; 105
 1b6:	98 e1       	ldi	r25, 0x18	; 24
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <USART_tx_string+0x8a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <USART_tx_string+0x94>
 1c2:	00 00       	nop
		_delay_ms(500);
		USART_tx_string("AT+CIPSEND=51\r\n");	
 1c4:	8c e2       	ldi	r24, 0x2C	; 44
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	89 e6       	ldi	r24, 0x69	; 105
 1d0:	98 e1       	ldi	r25, 0x18	; 24
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <USART_tx_string+0xa4>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <USART_tx_string+0xae>
 1dc:	00 00       	nop
		_delay_ms(500);
		USART_tx_string("GET /update?key=QTJ31HQI0KR0Q5AP&field1=");// Send Value
 1de:	8c e3       	ldi	r24, 0x3C	; 60
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	89 e6       	ldi	r24, 0x69	; 105
 1ea:	98 e1       	ldi	r25, 0x18	; 24
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <USART_tx_string+0xbe>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <USART_tx_string+0xc8>
 1f6:	00 00       	nop
		_delay_ms(500);
		a = a % 100;
 1f8:	ce 01       	movw	r24, r28
 1fa:	64 e6       	ldi	r22, 0x64	; 100
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 08 03 	call	0x610	; 0x610 <__divmodhi4>
		USART_transmit((a/10)+'0');
 202:	6a e0       	ldi	r22, 0x0A	; 10
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	0e 94 08 03 	call	0x610	; 0x610 <__divmodhi4>
 20a:	c8 2f       	mov	r28, r24
 20c:	80 e3       	ldi	r24, 0x30	; 48
 20e:	86 0f       	add	r24, r22
 210:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_transmit>
		a = a % 10;
		USART_transmit((a)+'0');
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	8c 0f       	add	r24, r28
 218:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_transmit>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	89 e6       	ldi	r24, 0x69	; 105
 220:	98 e1       	ldi	r25, 0x18	; 24
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <USART_tx_string+0xf4>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <USART_tx_string+0xfe>
 22c:	00 00       	nop
		_delay_ms(500);
		USART_transmit('\n');
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_transmit>
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	89 e6       	ldi	r24, 0x69	; 105
 238:	98 e1       	ldi	r25, 0x18	; 24
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <USART_tx_string+0x10c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <USART_tx_string+0x116>
 244:	00 00       	nop
		_delay_ms(500);
		
		OVF_COUNT = 0; //reset overflow counter
 246:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <__data_end>
	
	TCNT0 = 16; //reset TOP
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	86 bd       	out	0x26, r24	; 38
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <main>:
uint8_t OVF_COUNT = 0; //initialize the overflow count for interrupt
uint8_t OVF_LIMIT = 250; //set the limit the count can reach to set 1 sec delay


int main(void) {
	adc_init(); // Initialize the ADC (Analog / Digital Converter)
 254:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
	USART_init(); // Initialize the USART (RS232 interface)
 258:	0e 94 80 00 	call	0x100	; 0x100 <USART_init>
	
	USART_tx_string("AT\r\n"); // 
 25c:	85 e6       	ldi	r24, 0x65	; 101
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	89 e6       	ldi	r24, 0x69	; 105
 268:	98 e1       	ldi	r25, 0x18	; 24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x16>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x20>
 274:	00 00       	nop
	_delay_ms(500); // wait a bit
	USART_tx_string("AT+CWMODE=3\r\n");
 276:	8a e6       	ldi	r24, 0x6A	; 106
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	89 e6       	ldi	r24, 0x69	; 105
 282:	98 e1       	ldi	r25, 0x18	; 24
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x30>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x3a>
 28e:	00 00       	nop
	_delay_ms(500); // wait a bit
	
	USART_tx_string("AT+CWJAP=\"WIFI_NAME_HERE\",\"WIFI_PASSWORD_HERE\""); // // Log in WiFi	
 290:	88 e7       	ldi	r24, 0x78	; 120
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	89 e6       	ldi	r24, 0x69	; 105
 29c:	98 e1       	ldi	r25, 0x18	; 24
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x4a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x54>
 2a8:	00 00       	nop
	_delay_ms(500);
	
	USART_tx_string("AT+CIPMUX=0\r\n");
 2aa:	87 ea       	ldi	r24, 0xA7	; 167
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 97 00 	call	0x12e	; 0x12e <USART_tx_string>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	89 e6       	ldi	r24, 0x69	; 105
 2b6:	98 e1       	ldi	r25, 0x18	; 24
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x64>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x6e>
 2c2:	00 00       	nop
////////////////////////////////////////////////////////	
	//while(1)
	//{
		//keep waiting
	//}
}
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <__divsf3>:
 2ca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__divsf3x>
 2ce:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_round>
 2d2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_pscB>
 2d6:	58 f0       	brcs	.+22     	; 0x2ee <__divsf3+0x24>
 2d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_pscA>
 2dc:	40 f0       	brcs	.+16     	; 0x2ee <__divsf3+0x24>
 2de:	29 f4       	brne	.+10     	; 0x2ea <__divsf3+0x20>
 2e0:	5f 3f       	cpi	r21, 0xFF	; 255
 2e2:	29 f0       	breq	.+10     	; 0x2ee <__divsf3+0x24>
 2e4:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 2e8:	51 11       	cpse	r21, r1
 2ea:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 2ee:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_nan>

000002f2 <__divsf3x>:
 2f2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_split3>
 2f6:	68 f3       	brcs	.-38     	; 0x2d2 <__divsf3+0x8>

000002f8 <__divsf3_pse>:
 2f8:	99 23       	and	r25, r25
 2fa:	b1 f3       	breq	.-20     	; 0x2e8 <__divsf3+0x1e>
 2fc:	55 23       	and	r21, r21
 2fe:	91 f3       	breq	.-28     	; 0x2e4 <__divsf3+0x1a>
 300:	95 1b       	sub	r25, r21
 302:	55 0b       	sbc	r21, r21
 304:	bb 27       	eor	r27, r27
 306:	aa 27       	eor	r26, r26
 308:	62 17       	cp	r22, r18
 30a:	73 07       	cpc	r23, r19
 30c:	84 07       	cpc	r24, r20
 30e:	38 f0       	brcs	.+14     	; 0x31e <__divsf3_pse+0x26>
 310:	9f 5f       	subi	r25, 0xFF	; 255
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	44 1f       	adc	r20, r20
 31a:	aa 1f       	adc	r26, r26
 31c:	a9 f3       	breq	.-22     	; 0x308 <__divsf3_pse+0x10>
 31e:	35 d0       	rcall	.+106    	; 0x38a <__divsf3_pse+0x92>
 320:	0e 2e       	mov	r0, r30
 322:	3a f0       	brmi	.+14     	; 0x332 <__divsf3_pse+0x3a>
 324:	e0 e8       	ldi	r30, 0x80	; 128
 326:	32 d0       	rcall	.+100    	; 0x38c <__divsf3_pse+0x94>
 328:	91 50       	subi	r25, 0x01	; 1
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	e6 95       	lsr	r30
 32e:	00 1c       	adc	r0, r0
 330:	ca f7       	brpl	.-14     	; 0x324 <__divsf3_pse+0x2c>
 332:	2b d0       	rcall	.+86     	; 0x38a <__divsf3_pse+0x92>
 334:	fe 2f       	mov	r31, r30
 336:	29 d0       	rcall	.+82     	; 0x38a <__divsf3_pse+0x92>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	bb 1f       	adc	r27, r27
 340:	26 17       	cp	r18, r22
 342:	37 07       	cpc	r19, r23
 344:	48 07       	cpc	r20, r24
 346:	ab 07       	cpc	r26, r27
 348:	b0 e8       	ldi	r27, 0x80	; 128
 34a:	09 f0       	breq	.+2      	; 0x34e <__divsf3_pse+0x56>
 34c:	bb 0b       	sbc	r27, r27
 34e:	80 2d       	mov	r24, r0
 350:	bf 01       	movw	r22, r30
 352:	ff 27       	eor	r31, r31
 354:	93 58       	subi	r25, 0x83	; 131
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	3a f0       	brmi	.+14     	; 0x368 <__divsf3_pse+0x70>
 35a:	9e 3f       	cpi	r25, 0xFE	; 254
 35c:	51 05       	cpc	r21, r1
 35e:	78 f0       	brcs	.+30     	; 0x37e <__divsf3_pse+0x86>
 360:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 364:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 368:	5f 3f       	cpi	r21, 0xFF	; 255
 36a:	e4 f3       	brlt	.-8      	; 0x364 <__divsf3_pse+0x6c>
 36c:	98 3e       	cpi	r25, 0xE8	; 232
 36e:	d4 f3       	brlt	.-12     	; 0x364 <__divsf3_pse+0x6c>
 370:	86 95       	lsr	r24
 372:	77 95       	ror	r23
 374:	67 95       	ror	r22
 376:	b7 95       	ror	r27
 378:	f7 95       	ror	r31
 37a:	9f 5f       	subi	r25, 0xFF	; 255
 37c:	c9 f7       	brne	.-14     	; 0x370 <__divsf3_pse+0x78>
 37e:	88 0f       	add	r24, r24
 380:	91 1d       	adc	r25, r1
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret
 38a:	e1 e0       	ldi	r30, 0x01	; 1
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	bb 1f       	adc	r27, r27
 394:	62 17       	cp	r22, r18
 396:	73 07       	cpc	r23, r19
 398:	84 07       	cpc	r24, r20
 39a:	ba 07       	cpc	r27, r26
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__divsf3_pse+0xae>
 39e:	62 1b       	sub	r22, r18
 3a0:	73 0b       	sbc	r23, r19
 3a2:	84 0b       	sbc	r24, r20
 3a4:	ba 0b       	sbc	r27, r26
 3a6:	ee 1f       	adc	r30, r30
 3a8:	88 f7       	brcc	.-30     	; 0x38c <__divsf3_pse+0x94>
 3aa:	e0 95       	com	r30
 3ac:	08 95       	ret

000003ae <__fixsfsi>:
 3ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <__fixunssfsi>
 3b2:	68 94       	set
 3b4:	b1 11       	cpse	r27, r1
 3b6:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 3ba:	08 95       	ret

000003bc <__fixunssfsi>:
 3bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_splitA>
 3c0:	88 f0       	brcs	.+34     	; 0x3e4 <__fixunssfsi+0x28>
 3c2:	9f 57       	subi	r25, 0x7F	; 127
 3c4:	98 f0       	brcs	.+38     	; 0x3ec <__fixunssfsi+0x30>
 3c6:	b9 2f       	mov	r27, r25
 3c8:	99 27       	eor	r25, r25
 3ca:	b7 51       	subi	r27, 0x17	; 23
 3cc:	b0 f0       	brcs	.+44     	; 0x3fa <__fixunssfsi+0x3e>
 3ce:	e1 f0       	breq	.+56     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	1a f0       	brmi	.+6      	; 0x3e0 <__fixunssfsi+0x24>
 3da:	ba 95       	dec	r27
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <__fixunssfsi+0x14>
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e0:	b1 30       	cpi	r27, 0x01	; 1
 3e2:	91 f0       	breq	.+36     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e4:	0e 94 94 02 	call	0x528	; 0x528 <__fp_zero>
 3e8:	b1 e0       	ldi	r27, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_zero>
 3f0:	67 2f       	mov	r22, r23
 3f2:	78 2f       	mov	r23, r24
 3f4:	88 27       	eor	r24, r24
 3f6:	b8 5f       	subi	r27, 0xF8	; 248
 3f8:	39 f0       	breq	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	b9 3f       	cpi	r27, 0xF9	; 249
 3fc:	cc f3       	brlt	.-14     	; 0x3f0 <__fixunssfsi+0x34>
 3fe:	86 95       	lsr	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	b3 95       	inc	r27
 406:	d9 f7       	brne	.-10     	; 0x3fe <__fixunssfsi+0x42>
 408:	3e f4       	brtc	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	08 95       	ret

0000041a <__floatunsisf>:
 41a:	e8 94       	clt
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__floatsisf+0x12>

0000041e <__floatsisf>:
 41e:	97 fb       	bst	r25, 7
 420:	3e f4       	brtc	.+14     	; 0x430 <__floatsisf+0x12>
 422:	90 95       	com	r25
 424:	80 95       	com	r24
 426:	70 95       	com	r23
 428:	61 95       	neg	r22
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	8f 4f       	sbci	r24, 0xFF	; 255
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	99 23       	and	r25, r25
 432:	a9 f0       	breq	.+42     	; 0x45e <__floatsisf+0x40>
 434:	f9 2f       	mov	r31, r25
 436:	96 e9       	ldi	r25, 0x96	; 150
 438:	bb 27       	eor	r27, r27
 43a:	93 95       	inc	r25
 43c:	f6 95       	lsr	r31
 43e:	87 95       	ror	r24
 440:	77 95       	ror	r23
 442:	67 95       	ror	r22
 444:	b7 95       	ror	r27
 446:	f1 11       	cpse	r31, r1
 448:	f8 cf       	rjmp	.-16     	; 0x43a <__floatsisf+0x1c>
 44a:	fa f4       	brpl	.+62     	; 0x48a <__floatsisf+0x6c>
 44c:	bb 0f       	add	r27, r27
 44e:	11 f4       	brne	.+4      	; 0x454 <__floatsisf+0x36>
 450:	60 ff       	sbrs	r22, 0
 452:	1b c0       	rjmp	.+54     	; 0x48a <__floatsisf+0x6c>
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	16 c0       	rjmp	.+44     	; 0x48a <__floatsisf+0x6c>
 45e:	88 23       	and	r24, r24
 460:	11 f0       	breq	.+4      	; 0x466 <__floatsisf+0x48>
 462:	96 e9       	ldi	r25, 0x96	; 150
 464:	11 c0       	rjmp	.+34     	; 0x488 <__floatsisf+0x6a>
 466:	77 23       	and	r23, r23
 468:	21 f0       	breq	.+8      	; 0x472 <__floatsisf+0x54>
 46a:	9e e8       	ldi	r25, 0x8E	; 142
 46c:	87 2f       	mov	r24, r23
 46e:	76 2f       	mov	r23, r22
 470:	05 c0       	rjmp	.+10     	; 0x47c <__floatsisf+0x5e>
 472:	66 23       	and	r22, r22
 474:	71 f0       	breq	.+28     	; 0x492 <__floatsisf+0x74>
 476:	96 e8       	ldi	r25, 0x86	; 134
 478:	86 2f       	mov	r24, r22
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	2a f0       	brmi	.+10     	; 0x48a <__floatsisf+0x6c>
 480:	9a 95       	dec	r25
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	da f7       	brpl	.-10     	; 0x480 <__floatsisf+0x62>
 48a:	88 0f       	add	r24, r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	97 f9       	bld	r25, 7
 492:	08 95       	ret

00000494 <__fp_inf>:
 494:	97 f9       	bld	r25, 7
 496:	9f 67       	ori	r25, 0x7F	; 127
 498:	80 e8       	ldi	r24, 0x80	; 128
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	08 95       	ret

000004a0 <__fp_nan>:
 4a0:	9f ef       	ldi	r25, 0xFF	; 255
 4a2:	80 ec       	ldi	r24, 0xC0	; 192
 4a4:	08 95       	ret

000004a6 <__fp_pscA>:
 4a6:	00 24       	eor	r0, r0
 4a8:	0a 94       	dec	r0
 4aa:	16 16       	cp	r1, r22
 4ac:	17 06       	cpc	r1, r23
 4ae:	18 06       	cpc	r1, r24
 4b0:	09 06       	cpc	r0, r25
 4b2:	08 95       	ret

000004b4 <__fp_pscB>:
 4b4:	00 24       	eor	r0, r0
 4b6:	0a 94       	dec	r0
 4b8:	12 16       	cp	r1, r18
 4ba:	13 06       	cpc	r1, r19
 4bc:	14 06       	cpc	r1, r20
 4be:	05 06       	cpc	r0, r21
 4c0:	08 95       	ret

000004c2 <__fp_round>:
 4c2:	09 2e       	mov	r0, r25
 4c4:	03 94       	inc	r0
 4c6:	00 0c       	add	r0, r0
 4c8:	11 f4       	brne	.+4      	; 0x4ce <__fp_round+0xc>
 4ca:	88 23       	and	r24, r24
 4cc:	52 f0       	brmi	.+20     	; 0x4e2 <__fp_round+0x20>
 4ce:	bb 0f       	add	r27, r27
 4d0:	40 f4       	brcc	.+16     	; 0x4e2 <__fp_round+0x20>
 4d2:	bf 2b       	or	r27, r31
 4d4:	11 f4       	brne	.+4      	; 0x4da <__fp_round+0x18>
 4d6:	60 ff       	sbrs	r22, 0
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__fp_round+0x20>
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	08 95       	ret

000004e4 <__fp_split3>:
 4e4:	57 fd       	sbrc	r21, 7
 4e6:	90 58       	subi	r25, 0x80	; 128
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	59 f0       	breq	.+22     	; 0x504 <__fp_splitA+0x10>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	71 f0       	breq	.+28     	; 0x50e <__fp_splitA+0x1a>
 4f2:	47 95       	ror	r20

000004f4 <__fp_splitA>:
 4f4:	88 0f       	add	r24, r24
 4f6:	97 fb       	bst	r25, 7
 4f8:	99 1f       	adc	r25, r25
 4fa:	61 f0       	breq	.+24     	; 0x514 <__fp_splitA+0x20>
 4fc:	9f 3f       	cpi	r25, 0xFF	; 255
 4fe:	79 f0       	breq	.+30     	; 0x51e <__fp_splitA+0x2a>
 500:	87 95       	ror	r24
 502:	08 95       	ret
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	55 1f       	adc	r21, r21
 50c:	f2 cf       	rjmp	.-28     	; 0x4f2 <__fp_split3+0xe>
 50e:	46 95       	lsr	r20
 510:	f1 df       	rcall	.-30     	; 0x4f4 <__fp_splitA>
 512:	08 c0       	rjmp	.+16     	; 0x524 <__fp_splitA+0x30>
 514:	16 16       	cp	r1, r22
 516:	17 06       	cpc	r1, r23
 518:	18 06       	cpc	r1, r24
 51a:	99 1f       	adc	r25, r25
 51c:	f1 cf       	rjmp	.-30     	; 0x500 <__fp_splitA+0xc>
 51e:	86 95       	lsr	r24
 520:	71 05       	cpc	r23, r1
 522:	61 05       	cpc	r22, r1
 524:	08 94       	sec
 526:	08 95       	ret

00000528 <__fp_zero>:
 528:	e8 94       	clt

0000052a <__fp_szero>:
 52a:	bb 27       	eor	r27, r27
 52c:	66 27       	eor	r22, r22
 52e:	77 27       	eor	r23, r23
 530:	cb 01       	movw	r24, r22
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__mulsf3>:
 536:	0e 94 ae 02 	call	0x55c	; 0x55c <__mulsf3x>
 53a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_round>
 53e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_pscA>
 542:	38 f0       	brcs	.+14     	; 0x552 <__mulsf3+0x1c>
 544:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_pscB>
 548:	20 f0       	brcs	.+8      	; 0x552 <__mulsf3+0x1c>
 54a:	95 23       	and	r25, r21
 54c:	11 f0       	breq	.+4      	; 0x552 <__mulsf3+0x1c>
 54e:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 552:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_nan>
 556:	11 24       	eor	r1, r1
 558:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>

0000055c <__mulsf3x>:
 55c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_split3>
 560:	70 f3       	brcs	.-36     	; 0x53e <__mulsf3+0x8>

00000562 <__mulsf3_pse>:
 562:	95 9f       	mul	r25, r21
 564:	c1 f3       	breq	.-16     	; 0x556 <__mulsf3+0x20>
 566:	95 0f       	add	r25, r21
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	55 1f       	adc	r21, r21
 56c:	62 9f       	mul	r22, r18
 56e:	f0 01       	movw	r30, r0
 570:	72 9f       	mul	r23, r18
 572:	bb 27       	eor	r27, r27
 574:	f0 0d       	add	r31, r0
 576:	b1 1d       	adc	r27, r1
 578:	63 9f       	mul	r22, r19
 57a:	aa 27       	eor	r26, r26
 57c:	f0 0d       	add	r31, r0
 57e:	b1 1d       	adc	r27, r1
 580:	aa 1f       	adc	r26, r26
 582:	64 9f       	mul	r22, r20
 584:	66 27       	eor	r22, r22
 586:	b0 0d       	add	r27, r0
 588:	a1 1d       	adc	r26, r1
 58a:	66 1f       	adc	r22, r22
 58c:	82 9f       	mul	r24, r18
 58e:	22 27       	eor	r18, r18
 590:	b0 0d       	add	r27, r0
 592:	a1 1d       	adc	r26, r1
 594:	62 1f       	adc	r22, r18
 596:	73 9f       	mul	r23, r19
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	62 1f       	adc	r22, r18
 59e:	83 9f       	mul	r24, r19
 5a0:	a0 0d       	add	r26, r0
 5a2:	61 1d       	adc	r22, r1
 5a4:	22 1f       	adc	r18, r18
 5a6:	74 9f       	mul	r23, r20
 5a8:	33 27       	eor	r19, r19
 5aa:	a0 0d       	add	r26, r0
 5ac:	61 1d       	adc	r22, r1
 5ae:	23 1f       	adc	r18, r19
 5b0:	84 9f       	mul	r24, r20
 5b2:	60 0d       	add	r22, r0
 5b4:	21 1d       	adc	r18, r1
 5b6:	82 2f       	mov	r24, r18
 5b8:	76 2f       	mov	r23, r22
 5ba:	6a 2f       	mov	r22, r26
 5bc:	11 24       	eor	r1, r1
 5be:	9f 57       	subi	r25, 0x7F	; 127
 5c0:	50 40       	sbci	r21, 0x00	; 0
 5c2:	9a f0       	brmi	.+38     	; 0x5ea <__mulsf3_pse+0x88>
 5c4:	f1 f0       	breq	.+60     	; 0x602 <__mulsf3_pse+0xa0>
 5c6:	88 23       	and	r24, r24
 5c8:	4a f0       	brmi	.+18     	; 0x5dc <__mulsf3_pse+0x7a>
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	bb 1f       	adc	r27, r27
 5d0:	66 1f       	adc	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	91 50       	subi	r25, 0x01	; 1
 5d8:	50 40       	sbci	r21, 0x00	; 0
 5da:	a9 f7       	brne	.-22     	; 0x5c6 <__mulsf3_pse+0x64>
 5dc:	9e 3f       	cpi	r25, 0xFE	; 254
 5de:	51 05       	cpc	r21, r1
 5e0:	80 f0       	brcs	.+32     	; 0x602 <__mulsf3_pse+0xa0>
 5e2:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 5e6:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 5ea:	5f 3f       	cpi	r21, 0xFF	; 255
 5ec:	e4 f3       	brlt	.-8      	; 0x5e6 <__mulsf3_pse+0x84>
 5ee:	98 3e       	cpi	r25, 0xE8	; 232
 5f0:	d4 f3       	brlt	.-12     	; 0x5e6 <__mulsf3_pse+0x84>
 5f2:	86 95       	lsr	r24
 5f4:	77 95       	ror	r23
 5f6:	67 95       	ror	r22
 5f8:	b7 95       	ror	r27
 5fa:	f7 95       	ror	r31
 5fc:	e7 95       	ror	r30
 5fe:	9f 5f       	subi	r25, 0xFF	; 255
 600:	c1 f7       	brne	.-16     	; 0x5f2 <__mulsf3_pse+0x90>
 602:	fe 2b       	or	r31, r30
 604:	88 0f       	add	r24, r24
 606:	91 1d       	adc	r25, r1
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <__divmodhi4>:
 610:	97 fb       	bst	r25, 7
 612:	07 2e       	mov	r0, r23
 614:	16 f4       	brtc	.+4      	; 0x61a <__divmodhi4+0xa>
 616:	00 94       	com	r0
 618:	07 d0       	rcall	.+14     	; 0x628 <__divmodhi4_neg1>
 61a:	77 fd       	sbrc	r23, 7
 61c:	09 d0       	rcall	.+18     	; 0x630 <__divmodhi4_neg2>
 61e:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 622:	07 fc       	sbrc	r0, 7
 624:	05 d0       	rcall	.+10     	; 0x630 <__divmodhi4_neg2>
 626:	3e f4       	brtc	.+14     	; 0x636 <__divmodhi4_exit>

00000628 <__divmodhi4_neg1>:
 628:	90 95       	com	r25
 62a:	81 95       	neg	r24
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__divmodhi4_neg2>:
 630:	70 95       	com	r23
 632:	61 95       	neg	r22
 634:	7f 4f       	sbci	r23, 0xFF	; 255

00000636 <__divmodhi4_exit>:
 636:	08 95       	ret

00000638 <__udivmodhi4>:
 638:	aa 1b       	sub	r26, r26
 63a:	bb 1b       	sub	r27, r27
 63c:	51 e1       	ldi	r21, 0x11	; 17
 63e:	07 c0       	rjmp	.+14     	; 0x64e <__udivmodhi4_ep>

00000640 <__udivmodhi4_loop>:
 640:	aa 1f       	adc	r26, r26
 642:	bb 1f       	adc	r27, r27
 644:	a6 17       	cp	r26, r22
 646:	b7 07       	cpc	r27, r23
 648:	10 f0       	brcs	.+4      	; 0x64e <__udivmodhi4_ep>
 64a:	a6 1b       	sub	r26, r22
 64c:	b7 0b       	sbc	r27, r23

0000064e <__udivmodhi4_ep>:
 64e:	88 1f       	adc	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	5a 95       	dec	r21
 654:	a9 f7       	brne	.-22     	; 0x640 <__udivmodhi4_loop>
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
