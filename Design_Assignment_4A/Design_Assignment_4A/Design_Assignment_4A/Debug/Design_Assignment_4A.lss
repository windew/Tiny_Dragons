
Design_Assignment_4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009da  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a2  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 75 00 	call	0xea	; 0xea <main>
  d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init_adc>:
		}
	}
}
void init_adc(void) // Initiate ADC function
{
	ADMUX = (1<<REFS0); // Reference voltage at Aref
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  e2:	87 ee       	ldi	r24, 0xE7	; 231
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <main>:
int control; // controlling the motor with potentiometer
int toggle = 0; // to toggle the motor with the switch

int main()
{
	DDRC = 0xFB; // set Port C as outputs, leave INT1(PC3) as interrupt
  ea:	8b ef       	ldi	r24, 0xFB	; 251
  ec:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00; // pull-up pins
  ee:	18 b8       	out	0x08, r1	; 8

	EIMSK = 0x02; // enable INT1
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x02; // enable interrupt flag
  f4:	8c bb       	out	0x1c, r24	; 28
	EICRA = 0X0C; // set interrupt on rising edge
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>

	sei(); // enable interrupts
  fc:	78 94       	sei
	init_adc(); // initiate adc 
  fe:	0e 94 6e 00 	call	0xdc	; 0xdc <init_adc>
	TCCR0A=0x83; // set fast PWM // clear OCR0A on MATCH
 102:	83 e8       	ldi	r24, 0x83	; 131
 104:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x03; // set prescaler to 1024
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	85 bd       	out	0x25, r24	; 37
	
	while (1)
	{
		while((ADCSRA&(1<<ADIF))==0); // wait for conversion
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
		control = ADC*80/100; // ADC Conversion
 10e:	c8 e7       	ldi	r28, 0x78	; 120
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	40 e5       	ldi	r20, 0x50	; 80
	TCCR0A=0x83; // set fast PWM // clear OCR0A on MATCH
	TCCR0B=0x03; // set prescaler to 1024
	
	while (1)
	{
		while((ADCSRA&(1<<ADIF))==0); // wait for conversion
 114:	80 81       	ld	r24, Z
 116:	84 ff       	sbrs	r24, 4
 118:	fd cf       	rjmp	.-6      	; 0x114 <main+0x2a>
		control = ADC*80/100; // ADC Conversion
 11a:	88 81       	ld	r24, Y
 11c:	99 81       	ldd	r25, Y+1	; 0x01
 11e:	48 9f       	mul	r20, r24
 120:	90 01       	movw	r18, r0
 122:	49 9f       	mul	r20, r25
 124:	30 0d       	add	r19, r0
 126:	11 24       	eor	r1, r1
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	36 95       	lsr	r19
 12e:	27 95       	ror	r18
 130:	ab e7       	ldi	r26, 0x7B	; 123
 132:	b4 e1       	ldi	r27, 0x14	; 20
 134:	0e 94 c5 00 	call	0x18a	; 0x18a <__umulhisi3>
 138:	96 95       	lsr	r25
 13a:	87 95       	ror	r24
 13c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <control+0x1>
 140:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <control>
		OCR0A = control; // Output to converted value to 0CR0A
 144:	87 bd       	out	0x27, r24	; 39
		
		if(toggle == 0) // when switch is NOT pressed
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14e:	89 2b       	or	r24, r25
 150:	09 f7       	brne	.-62     	; 0x114 <main+0x2a>
		{
			PORTC = 0x00; //
 152:	18 b8       	out	0x08, r1	; 8
 154:	df cf       	rjmp	.-66     	; 0x114 <main+0x2a>

00000156 <__vector_2>:
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	// from ADCRSA we Enable ADC, Start Conversion, Set prescalar as 128
}

ISR(INT1_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	toggle ^= 1; // toggle switch on INT1 Interrupt
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	82 27       	eor	r24, r18
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__umulhisi3>:
 18a:	a2 9f       	mul	r26, r18
 18c:	b0 01       	movw	r22, r0
 18e:	b3 9f       	mul	r27, r19
 190:	c0 01       	movw	r24, r0
 192:	a3 9f       	mul	r26, r19
 194:	70 0d       	add	r23, r0
 196:	81 1d       	adc	r24, r1
 198:	11 24       	eor	r1, r1
 19a:	91 1d       	adc	r25, r1
 19c:	b2 9f       	mul	r27, r18
 19e:	70 0d       	add	r23, r0
 1a0:	81 1d       	adc	r24, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	91 1d       	adc	r25, r1
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
