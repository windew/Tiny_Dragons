
design_assignment_2c_T1_2A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00001439  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047e  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:


int main(void)
{
	unsigned char count = 0;  //count to keep track of timer0
    DDRC &= 0b1000;            // connect PORTC.2 to switch as input
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	88 70       	andi	r24, 0x08	; 8
  d0:	87 b9       	out	0x07, r24	; 7
    PORTC |= 0b1000;     // enable pull-up on port c
  d2:	43 9a       	sbi	0x08, 3	; 8
    DDRB |= 0b0100;            // set PORTB.2 for output
  d4:	22 9a       	sbi	0x04, 2	; 4



int main(void)
{
	unsigned char count = 0;  //count to keep track of timer0
  d6:	90 e0       	ldi	r25, 0x00	; 0
    DDRB |= 0b0100;            // set PORTB.2 for output

	while (1) 
    {
		//set timer0 with prescalar 256 and normal mode
		TCCR0A = 0;
  d8:	14 bc       	out	0x24, r1	; 36
		TCCR0B |= (1<<CS02);
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 bd       	out	0x25, r24	; 37
		
		TCNT0 = 0;		//counter initiallized
  e0:	16 bc       	out	0x26, r1	; 38
			while((TIFR0 & 0X1) == 0);  //WAIT for overflow
  e2:	a8 9b       	sbis	0x15, 0	; 21
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <main+0x16>
			
			TCCR0B = 0; //stop timer
  e6:	15 bc       	out	0x25, r1	; 37
			TIFR0 |= 1; //clear overflow
  e8:	a8 9a       	sbi	0x15, 0	; 21
			
			
			if(!(PINC & (1<<PINC2))){  // check if pin is low
  ea:	32 99       	sbic	0x06, 2	; 6
  ec:	f5 cf       	rjmp	.-22     	; 0xd8 <main+0xc>
				PORTB &= ~0b0100;          // set LED on
  ee:	2a 98       	cbi	0x05, 2	; 5
				if (count < 200)   //edit
  f0:	98 3c       	cpi	r25, 0xC8	; 200
  f2:	10 f4       	brcc	.+4      	; 0xf8 <main+0x2c>
					{
						count++;
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	f0 cf       	rjmp	.-32     	; 0xd8 <main+0xc>
					
					}
				else{                                    // otherwise (pin is high)
					PORTB |= 0b0100;           // LED off
  f8:	2a 9a       	sbi	0x05, 2	; 5
  fa:	ee cf       	rjmp	.-36     	; 0xd8 <main+0xc>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
