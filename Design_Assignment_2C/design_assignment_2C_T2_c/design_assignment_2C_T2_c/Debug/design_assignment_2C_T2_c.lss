
design_assignment_2C_T2_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099f  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b6  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
// this interrupt service routine (ISR) runs whenever an overflow on Timer0 occurs
 
 
 int main(void) {
	 
	 count = 0;  // initialize count to keep track of number of
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	 DDRB |= (1 << 3);   // connect LED to pin PB.2
  e4:	23 9a       	sbi	0x04, 3	; 4
	 PORTB = 0; //led is off
  e6:	15 b8       	out	0x05, r1	; 5
	 // set up Timer0 with prescaler = 1024 and normal mode
	 TCCR0A = 0;
  e8:	14 bc       	out	0x24, r1	; 36
	 TCCR0B |= (1 << CS02)|(1 << CS00);
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	85 bd       	out	0x25, r24	; 37
	 TCNT0 = 0;    // initialize counter
  f0:	16 bc       	out	0x26, r1	; 38
	 TIMSK0 |= (1 << TOIE0);  // enable overflow interrupt
  f2:	ee e6       	ldi	r30, 0x6E	; 110
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
	 sei();     // enable global interrupts
  fc:	78 94       	sei
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0x22>

00000100 <__vector_16>:
 
 
 
 
 ISR (TIMER0_OVF_vect)
 {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	 if (count > 21)
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	46 97       	sbiw	r24, 0x16	; 22
 118:	04 f1       	brlt	.+64     	; 0x15a <__vector_16+0x5a>
	 {
		 PORTB |= (1 << 3);   // Toggle PB.3
 11a:	2b 9a       	sbi	0x05, 3	; 5
		 if(count < 38 )
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 124:	86 97       	sbiw	r24, 0x26	; 38
 126:	54 f4       	brge	.+20     	; 0x13c <__vector_16+0x3c>
			{
				count++;
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13a:	18 c0       	rjmp	.+48     	; 0x16c <__vector_16+0x6c>
			}
		else
			{
				count = 0;
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				PORTB = 0;
 144:	15 b8       	out	0x05, r1	; 5
				count++;  // reinitialize cnt
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 158:	09 c0       	rjmp	.+18     	; 0x16c <__vector_16+0x6c>
			}    
	 }
	 else  count++;
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 }
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
