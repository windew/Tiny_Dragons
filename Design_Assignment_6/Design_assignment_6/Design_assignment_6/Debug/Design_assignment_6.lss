
Design_assignment_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000156a  000015fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800150  00800150  0000164e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001365  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba4  00000000  00000000  00002b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000972  00000000  00000000  000036bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00004030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000644  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000564  00000000  00000000  00004804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__ctors_end>
       4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      18:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      1c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      20:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      2c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      38:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      3c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      40:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      48:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      4c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      50:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      58:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      5c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      60:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      68:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      6c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      70:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      74:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      78:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      7c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      80:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      84:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      8c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      90:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      94:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      98:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      9c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      a0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      a4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      a8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      ac:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      b0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	00 40       	sbci	r16, 0x00	; 0
      b6:	7a 10       	cpse	r7, r10
      b8:	f3 5a       	subi	r31, 0xA3	; 163
      ba:	00 a0       	ldd	r0, Z+32	; 0x20
      bc:	72 4e       	sbci	r23, 0xE2	; 226
      be:	18 09       	sbc	r17, r8
      c0:	00 10       	cpse	r0, r0
      c2:	a5 d4       	rcall	.+2378   	; 0xa0e <__mulsf3_pse+0x12>
      c4:	e8 00       	.word	0x00e8	; ????
      c6:	00 e8       	ldi	r16, 0x80	; 128
      c8:	76 48       	sbci	r23, 0x86	; 134
      ca:	17 00       	.word	0x0017	; ????
      cc:	00 e4       	ldi	r16, 0x40	; 64
      ce:	0b 54       	subi	r16, 0x4B	; 75
      d0:	02 00       	.word	0x0002	; ????
      d2:	00 ca       	rjmp	.-3072   	; 0xfffff4d4 <__eeprom_end+0xff7ef4d4>
      d4:	9a 3b       	cpi	r25, 0xBA	; 186
      d6:	00 00       	nop
      d8:	00 e1       	ldi	r16, 0x10	; 16
      da:	f5 05       	cpc	r31, r5
      dc:	00 00       	nop
      de:	80 96       	adiw	r24, 0x20	; 32
      e0:	98 00       	.word	0x0098	; ????
      e2:	00 00       	nop
      e4:	40 42       	sbci	r20, 0x20	; 32
      e6:	0f 00       	.word	0x000f	; ????
      e8:	00 00       	nop
      ea:	a0 86       	std	Z+8, r10	; 0x08
      ec:	01 00       	.word	0x0001	; ????
      ee:	00 00       	nop
      f0:	10 27       	eor	r17, r16
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	e8 03       	fmulsu	r22, r16
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	64 00       	.word	0x0064	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	0a 00       	.word	0x000a	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	01 00       	.word	0x0001	; ????
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	2c 76       	andi	r18, 0x6C	; 108
     110:	d8 88       	ldd	r13, Y+16	; 0x10
     112:	dc 67       	ori	r29, 0x7C	; 124
     114:	4f 08       	sbc	r4, r15
     116:	23 df       	rcall	.-442    	; 0xffffff5e <__eeprom_end+0xff7eff5e>
     118:	c1 df       	rcall	.-126    	; 0x9c <__SREG__+0x5d>
     11a:	ae 59       	subi	r26, 0x9E	; 158
     11c:	e1 b1       	in	r30, 0x01	; 1
     11e:	b7 96       	adiw	r30, 0x27	; 39
     120:	e5 e3       	ldi	r30, 0x35	; 53
     122:	e4 53       	subi	r30, 0x34	; 52
     124:	c6 3a       	cpi	r28, 0xA6	; 166
     126:	e6 51       	subi	r30, 0x16	; 22
     128:	99 76       	andi	r25, 0x69	; 105
     12a:	96 e8       	ldi	r25, 0x86	; 134
     12c:	e6 c2       	rjmp	.+1484   	; 0x6fa <main+0x20e>
     12e:	84 26       	eor	r8, r20
     130:	eb 89       	ldd	r30, Y+19	; 0x13
     132:	8c 9b       	sbis	0x11, 4	; 17
     134:	62 ed       	ldi	r22, 0xD2	; 210
     136:	40 7c       	andi	r20, 0xC0	; 192
     138:	6f fc       	.word	0xfc6f	; ????
     13a:	ef bc       	out	0x2f, r14	; 47
     13c:	9c 9f       	mul	r25, r28
     13e:	40 f2       	brcs	.-112    	; 0xd0 <__trampolines_end+0x1c>
     140:	ba a5       	ldd	r27, Y+42	; 0x2a
     142:	6f a5       	ldd	r22, Y+47	; 0x2f
     144:	f4 90       	lpm	r15, Z
     146:	05 5a       	subi	r16, 0xA5	; 165
     148:	2a f7       	brpl	.-54     	; 0x114 <__trampolines_end+0x60>
     14a:	5c 93       	st	X, r21
     14c:	6b 6c       	ori	r22, 0xCB	; 203
     14e:	f9 67       	ori	r31, 0x79	; 121
     150:	6d c1       	rjmp	.+730    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     152:	1b fc       	.word	0xfc1b	; ????
     154:	e0 e4       	ldi	r30, 0x40	; 64
     156:	0d 47       	sbci	r16, 0x7D	; 125
     158:	fe f5       	brtc	.+126    	; 0x1d8 <.do_clear_bss_loop>
     15a:	20 e6       	ldi	r18, 0x60	; 96
     15c:	b5 00       	.word	0x00b5	; ????
     15e:	d0 ed       	ldi	r29, 0xD0	; 208
     160:	90 2e       	mov	r9, r16
     162:	03 00       	.word	0x0003	; ????
     164:	94 35       	cpi	r25, 0x54	; 84
     166:	77 05       	cpc	r23, r7
     168:	00 80       	ld	r0, Z
     16a:	84 1e       	adc	r8, r20
     16c:	08 00       	.word	0x0008	; ????
     16e:	00 20       	and	r0, r0
     170:	4e 0a       	sbc	r4, r30
     172:	00 00       	nop
     174:	00 c8       	rjmp	.-4096   	; 0xfffff176 <__eeprom_end+0xff7ef176>
     176:	0c 33       	cpi	r16, 0x3C	; 60
     178:	33 33       	cpi	r19, 0x33	; 51
     17a:	33 0f       	add	r19, r19
     17c:	98 6e       	ori	r25, 0xE8	; 232
     17e:	12 83       	std	Z+2, r17	; 0x02
     180:	11 41       	sbci	r17, 0x11	; 17
     182:	ef 8d       	ldd	r30, Y+31	; 0x1f
     184:	21 14       	cp	r2, r1
     186:	89 3b       	cpi	r24, 0xB9	; 185
     188:	e6 55       	subi	r30, 0x56	; 86
     18a:	16 cf       	rjmp	.-468    	; 0xffffffb8 <__eeprom_end+0xff7effb8>
     18c:	fe e6       	ldi	r31, 0x6E	; 110
     18e:	db 18       	sub	r13, r11
     190:	d1 84       	ldd	r13, Z+9	; 0x09
     192:	4b 38       	cpi	r20, 0x8B	; 139
     194:	1b f7       	brvc	.-58     	; 0x15c <__trampolines_end+0xa8>
     196:	7c 1d       	adc	r23, r12
     198:	90 1d       	adc	r25, r0
     19a:	a4 bb       	out	0x14, r26	; 20
     19c:	e4 24       	eor	r14, r4
     19e:	20 32       	cpi	r18, 0x20	; 32
     1a0:	84 72       	andi	r24, 0x24	; 36
     1a2:	5e 22       	and	r5, r30
     1a4:	81 00       	.word	0x0081	; ????
     1a6:	c9 f1       	breq	.+114    	; 0x21a <I2C_Repeated_Start+0x22>
     1a8:	24 ec       	ldi	r18, 0xC4	; 196
     1aa:	a1 e5       	ldi	r26, 0x51	; 81
     1ac:	3d 27       	eor	r19, r29

000001ae <__ctors_end>:
     1ae:	11 24       	eor	r1, r1
     1b0:	1f be       	out	0x3f, r1	; 63
     1b2:	cf ef       	ldi	r28, 0xFF	; 255
     1b4:	d8 e0       	ldi	r29, 0x08	; 8
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	cd bf       	out	0x3d, r28	; 61

000001ba <__do_copy_data>:
     1ba:	11 e0       	ldi	r17, 0x01	; 1
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	ea e6       	ldi	r30, 0x6A	; 106
     1c2:	f5 e1       	ldi	r31, 0x15	; 21
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <__do_copy_data+0x10>
     1c6:	05 90       	lpm	r0, Z+
     1c8:	0d 92       	st	X+, r0
     1ca:	a0 35       	cpi	r26, 0x50	; 80
     1cc:	b1 07       	cpc	r27, r17
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <__do_copy_data+0xc>

000001d0 <__do_clear_bss>:
     1d0:	21 e0       	ldi	r18, 0x01	; 1
     1d2:	a0 e5       	ldi	r26, 0x50	; 80
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <.do_clear_bss_start>

000001d8 <.do_clear_bss_loop>:
     1d8:	1d 92       	st	X+, r1

000001da <.do_clear_bss_start>:
     1da:	ac 36       	cpi	r26, 0x6C	; 108
     1dc:	b2 07       	cpc	r27, r18
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <.do_clear_bss_loop>
     1e0:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
     1e4:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <_exit>

000001e8 <__bad_interrupt>:
     1e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ec <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1ec:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     1f0:	88 e4       	ldi	r24, 0x48	; 72
     1f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     1f6:	08 95       	ret

000001f8 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     1f8:	94 ea       	ldi	r25, 0xA4	; 164
     1fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     1fe:	ec eb       	ldi	r30, 0xBC	; 188
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	90 81       	ld	r25, Z
     204:	99 23       	and	r25, r25
     206:	ec f7       	brge	.-6      	; 0x202 <I2C_Repeated_Start+0xa>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
     208:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     20c:	98 7f       	andi	r25, 0xF8	; 248
     20e:	90 31       	cpi	r25, 0x10	; 16
     210:	99 f4       	brne	.+38     	; 0x238 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR0 = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     212:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     216:	84 e8       	ldi	r24, 0x84	; 132
     218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     21c:	ec eb       	ldi	r30, 0xBC	; 188
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 23       	and	r24, r24
     224:	ec f7       	brge	.-6      	; 0x220 <I2C_Repeated_Start+0x28>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
     226:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     22a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     22c:	80 34       	cpi	r24, 0x40	; 64
     22e:	31 f0       	breq	.+12     	; 0x23c <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     230:	80 32       	cpi	r24, 0x20	; 32
     232:	31 f0       	breq	.+12     	; 0x240 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	08 95       	ret
	TWDR0 = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     240:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     242:	08 95       	ret

00000244 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR0=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     244:	84 e9       	ldi	r24, 0x94	; 148
     246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR0 & (1<<TWSTO));								/* Wait until stop condition execution */
     24a:	ec eb       	ldi	r30, 0xBC	; 188
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	84 fd       	sbrc	r24, 4
     252:	fd cf       	rjmp	.-6      	; 0x24e <I2C_Stop+0xa>
}
     254:	08 95       	ret

00000256 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     26a:	cc eb       	ldi	r28, 0xBC	; 188
     26c:	d0 e0       	ldi	r29, 0x00	; 0
     26e:	0f 2e       	mov	r0, r31
     270:	f4 ea       	ldi	r31, 0xA4	; 164
     272:	df 2e       	mov	r13, r31
     274:	f0 2d       	mov	r31, r0
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
     276:	09 eb       	ldi	r16, 0xB9	; 185
     278:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR0 = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     27a:	0f 2e       	mov	r0, r31
     27c:	fb eb       	ldi	r31, 0xBB	; 187
     27e:	ef 2e       	mov	r14, r31
     280:	f1 2c       	mov	r15, r1
     282:	f0 2d       	mov	r31, r0
		TWCR0 = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     284:	0f 2e       	mov	r0, r31
     286:	f4 e8       	ldi	r31, 0x84	; 132
     288:	cf 2e       	mov	r12, r31
     28a:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR0 = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     28c:	d8 82       	st	Y, r13
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     28e:	88 81       	ld	r24, Y
     290:	88 23       	and	r24, r24
     292:	ec f7       	brge	.-6      	; 0x28e <I2C_Start_Wait+0x38>
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
     294:	f8 01       	movw	r30, r16
     296:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     298:	88 7f       	andi	r24, 0xF8	; 248
     29a:	88 30       	cpi	r24, 0x08	; 8
     29c:	b9 f7       	brne	.-18     	; 0x28c <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR0 = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     29e:	f7 01       	movw	r30, r14
     2a0:	b0 82       	st	Z, r11
		TWCR0 = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2a2:	c8 82       	st	Y, r12
		while (!(TWCR0 & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     2a4:	88 81       	ld	r24, Y
     2a6:	88 23       	and	r24, r24
     2a8:	ec f7       	brge	.-6      	; 0x2a4 <I2C_Start_Wait+0x4e>
		status = TWSR0 & 0xF8;								/* Read TWI status register with masking lower three bits */
     2aa:	f8 01       	movw	r30, r16
     2ac:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     2ae:	88 7f       	andi	r24, 0xF8	; 248
     2b0:	88 31       	cpi	r24, 0x18	; 24
     2b2:	19 f0       	breq	.+6      	; 0x2ba <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
     2b4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>
			continue;										/* continue with start loop again */
     2b8:	e9 cf       	rjmp	.-46     	; 0x28c <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	08 95       	ret

000002ce <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR0 = data;											/* Copy data in TWI data register */
     2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     2d2:	84 e8       	ldi	r24, 0x84	; 132
     2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2d8:	ec eb       	ldi	r30, 0xBC	; 188
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	88 23       	and	r24, r24
     2e0:	ec f7       	brge	.-6      	; 0x2dc <I2C_Write+0xe>
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
     2e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     2e6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     2e8:	88 32       	cpi	r24, 0x28	; 40
     2ea:	21 f0       	breq	.+8      	; 0x2f4 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     2ec:	80 33       	cpi	r24, 0x30	; 48
     2ee:	21 f0       	breq	.+8      	; 0x2f8 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	08 95       	ret
	TWDR0 = data;											/* Copy data in TWI data register */
	TWCR0 = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR0 & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     2f8:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     2fa:	08 95       	ret

000002fc <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     2fc:	84 ec       	ldi	r24, 0xC4	; 196
     2fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     302:	ec eb       	ldi	r30, 0xBC	; 188
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	88 23       	and	r24, r24
     30a:	ec f7       	brge	.-6      	; 0x306 <I2C_Read_Ack+0xa>
	return TWDR0;											/* Return received data */
     30c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
     310:	08 95       	ret

00000312 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR0=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     312:	84 e8       	ldi	r24, 0x84	; 132
     314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR0 & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     318:	ec eb       	ldi	r30, 0xBC	; 188
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	88 23       	and	r24, r24
     320:	ec f7       	brge	.-6      	; 0x31c <I2C_Read_Nack+0xa>
	return TWDR0;
     322:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     326:	08 95       	ret

00000328 <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     328:	2f ef       	ldi	r18, 0xFF	; 255
     32a:	82 e5       	ldi	r24, 0x52	; 82
     32c:	97 e0       	ldi	r25, 0x07	; 7
     32e:	21 50       	subi	r18, 0x01	; 1
     330:	80 40       	sbci	r24, 0x00	; 0
     332:	90 40       	sbci	r25, 0x00	; 0
     334:	e1 f7       	brne	.-8      	; 0x32e <MPU6050_Init+0x6>
     336:	00 c0       	rjmp	.+0      	; 0x338 <MPU6050_Init+0x10>
     338:	00 00       	nop
float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;

void MPU6050_Init()
{
	_delay_ms(150);										/* Power up time >100ms 			*/
	I2C_Start_Wait(0xD0);								/* Start with device write address 	*/
     33a:	80 ed       	ldi	r24, 0xD0	; 208
     33c:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register 	*/
     340:	89 e1       	ldi	r24, 0x19	; 25
     342:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate				 	*/
     346:	87 e0       	ldi	r24, 0x07	; 7
     348:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Stop();
     34c:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     350:	80 ed       	ldi	r24, 0xD0	; 208
     352:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register 	*/
     356:	8b e6       	ldi	r24, 0x6B	; 107
     358:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Stop();
     362:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     366:	80 ed       	ldi	r24, 0xD0	; 208
     368:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     36c:	8a e1       	ldi	r24, 0x1A	; 26
     36e:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz 					   */
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Stop();
     378:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     37c:	80 ed       	ldi	r24, 0xD0	; 208
     37e:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     382:	8b e1       	ldi	r24, 0x1B	; 27
     384:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C 	*/
     388:	88 e1       	ldi	r24, 0x18	; 24
     38a:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Stop();
     38e:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>

	I2C_Start_Wait(0xD0);
     392:	80 ed       	ldi	r24, 0xD0	; 208
     394:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     398:	88 e3       	ldi	r24, 0x38	; 56
     39a:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Write(0x01);
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Stop();
     3a4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>
     3a8:	08 95       	ret

000003aa <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address 			   */
     3aa:	80 ed       	ldi	r24, 0xD0	; 208
     3ac:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     3b0:	8b e3       	ldi	r24, 0x3B	; 59
     3b2:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address 			   */
     3b6:	81 ed       	ldi	r24, 0xD1	; 209
     3b8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Repeated_Start>
     3bc:	08 95       	ret

000003be <Read_RawValue>:
}

void Read_RawValue()
{
     3be:	cf 93       	push	r28
	MPU_Start_Loc();									/* Read Gyro values */
     3c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3c4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     3c8:	c8 2f       	mov	r28, r24
     3ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     3ce:	6c 2f       	mov	r22, r28
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	76 2f       	mov	r23, r22
     3d4:	66 27       	eor	r22, r22
     3d6:	68 2b       	or	r22, r24
     3d8:	07 2e       	mov	r0, r23
     3da:	00 0c       	add	r0, r0
     3dc:	88 0b       	sbc	r24, r24
     3de:	99 0b       	sbc	r25, r25
     3e0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
     3e4:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <Acc_x>
     3e8:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <Acc_x+0x1>
     3ec:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <Acc_x+0x2>
     3f0:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3f4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     3f8:	c8 2f       	mov	r28, r24
     3fa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     3fe:	6c 2f       	mov	r22, r28
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	76 2f       	mov	r23, r22
     404:	66 27       	eor	r22, r22
     406:	68 2b       	or	r22, r24
     408:	07 2e       	mov	r0, r23
     40a:	00 0c       	add	r0, r0
     40c:	88 0b       	sbc	r24, r24
     40e:	99 0b       	sbc	r25, r25
     410:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
     414:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <Acc_y>
     418:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <Acc_y+0x1>
     41c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Acc_y+0x2>
     420:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     424:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     428:	c8 2f       	mov	r28, r24
     42a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     42e:	6c 2f       	mov	r22, r28
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	76 2f       	mov	r23, r22
     434:	66 27       	eor	r22, r22
     436:	68 2b       	or	r22, r24
     438:	07 2e       	mov	r0, r23
     43a:	00 0c       	add	r0, r0
     43c:	88 0b       	sbc	r24, r24
     43e:	99 0b       	sbc	r25, r25
     440:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
     444:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <__data_end>
     448:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <__data_end+0x1>
     44c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end+0x2>
     450:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     454:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     458:	c8 2f       	mov	r28, r24
     45a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     45e:	6c 2f       	mov	r22, r28
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	76 2f       	mov	r23, r22
     464:	66 27       	eor	r22, r22
     466:	68 2b       	or	r22, r24
     468:	07 2e       	mov	r0, r23
     46a:	00 0c       	add	r0, r0
     46c:	88 0b       	sbc	r24, r24
     46e:	99 0b       	sbc	r25, r25
     470:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
     474:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <Gyro_x>
     478:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <Gyro_x+0x1>
     47c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Gyro_x+0x2>
     480:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     484:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     488:	c8 2f       	mov	r28, r24
     48a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     48e:	6c 2f       	mov	r22, r28
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	76 2f       	mov	r23, r22
     494:	66 27       	eor	r22, r22
     496:	68 2b       	or	r22, r24
     498:	07 2e       	mov	r0, r23
     49a:	00 0c       	add	r0, r0
     49c:	88 0b       	sbc	r24, r24
     49e:	99 0b       	sbc	r25, r25
     4a0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
     4a4:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <Gyro_y>
     4a8:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <Gyro_y+0x1>
     4ac:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Gyro_y+0x2>
     4b0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     4b4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <I2C_Read_Ack>
     4b8:	c8 2f       	mov	r28, r24
     4ba:	0e 94 89 01 	call	0x312	; 0x312 <I2C_Read_Nack>
     4be:	6c 2f       	mov	r22, r28
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	76 2f       	mov	r23, r22
     4c4:	66 27       	eor	r22, r22
     4c6:	68 2b       	or	r22, r24
     4c8:	07 2e       	mov	r0, r23
     4ca:	00 0c       	add	r0, r0
     4cc:	88 0b       	sbc	r24, r24
     4ce:	99 0b       	sbc	r25, r25
     4d0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatsisf>
     4d4:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <Gyro_z>
     4d8:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <Gyro_z+0x1>
     4dc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <Gyro_z+0x2>
     4e0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <Gyro_z+0x3>
	I2C_Stop();
     4e4:	0e 94 22 01 	call	0x244	; 0x244 <I2C_Stop>
}
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <main>:

int main()
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	e2 97       	sbiw	r28, 0x32	; 50
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
	char buffer[20], float_[10];
	float Xa,Ya,Za,t;
	float Xg=0,Yg=0,Zg=0;
	I2C_Init();
     500:	0e 94 f6 00 	call	0x1ec	; 0x1ec <I2C_Init>
	MPU6050_Init();
     504:	0e 94 94 01 	call	0x328	; 0x328 <MPU6050_Init>
	USART_Init(9600);
     508:	60 e8       	ldi	r22, 0x80	; 128
     50a:	75 e2       	ldi	r23, 0x25	; 37
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 a4 03 	call	0x748	; 0x748 <USART_Init>
		
		Xg = Gyro_x/16.4;
		Yg = Gyro_y/16.4;
		Zg = Gyro_z/16.4;

		dtostrf( Xa, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
     514:	7e 01       	movw	r14, r28
     516:	25 e1       	ldi	r18, 0x15	; 21
     518:	e2 0e       	add	r14, r18
     51a:	f1 1c       	adc	r15, r1
		sprintf(buffer," Ax = %s g\t",float_);			/* This is where the value is being put as a string onto the buffer variable */
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	6c 01       	movw	r12, r24
		dtostrf( Ya, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_v */
		sprintf(buffer," Ay = %s g\t",float_);			/* This is where the value is being put as a string onto the buffer variable */
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
		
		dtostrf( Za, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
		sprintf(buffer," Az = %s g\t",float_);			/* This is where the value is being put as a string onto the buffer variable */
     522:	0f 2e       	mov	r0, r31
     524:	f8 e1       	ldi	r31, 0x18	; 24
     526:	4f 2e       	mov	r4, r31
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	5f 2e       	mov	r5, r31
     52c:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */

		dtostrf( Xg, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
		sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);	/* This is where the value is being put as a string onto the buffer variable */
     52e:	0f 2e       	mov	r0, r31
     530:	f8 ef       	ldi	r31, 0xF8	; 248
     532:	3f 2e       	mov	r3, r31
     534:	f0 2d       	mov	r31, r0
     536:	0f 2e       	mov	r0, r31
     538:	f4 e2       	ldi	r31, 0x24	; 36
     53a:	6f 2e       	mov	r6, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	7f 2e       	mov	r7, r31
     540:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */

		dtostrf( Yg, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
		sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);	/* This is where the value is being put as a string onto the buffer variable */
     542:	0f 2e       	mov	r0, r31
     544:	f2 e3       	ldi	r31, 0x32	; 50
     546:	8f 2e       	mov	r8, r31
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	9f 2e       	mov	r9, r31
     54c:	f0 2d       	mov	r31, r0
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
		
		dtostrf( Zg, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
		sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);	/* This is where the value is being put as a string onto the buffer variable */
     54e:	0f 2e       	mov	r0, r31
     550:	f0 e4       	ldi	r31, 0x40	; 64
     552:	af 2e       	mov	r10, r31
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	bf 2e       	mov	r11, r31
     558:	f0 2d       	mov	r31, r0
	MPU6050_Init();
	USART_Init(9600);
	
	while(1)
	{
		Read_RawValue();
     55a:	0e 94 df 01 	call	0x3be	; 0x3be <Read_RawValue>

		Xa = Acc_x/16384.0;								/* Divide raw value by sensitivity scale factor to get real values */
		Ya = Acc_y/16384.0;
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e8       	ldi	r20, 0x80	; 128
     564:	58 e3       	ldi	r21, 0x38	; 56
     566:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <Acc_y>
     56a:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <Acc_y+0x1>
     56e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Acc_y+0x2>
     572:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Acc_y+0x3>
     576:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__mulsf3>
     57a:	6f 8f       	std	Y+31, r22	; 0x1f
     57c:	78 a3       	std	Y+32, r23	; 0x20
     57e:	89 a3       	std	Y+33, r24	; 0x21
     580:	9a a3       	std	Y+34, r25	; 0x22
		Za = Acc_z/16384.0;
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e8       	ldi	r20, 0x80	; 128
     588:	58 e3       	ldi	r21, 0x38	; 56
     58a:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <__data_end>
     58e:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <__data_end+0x1>
     592:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end+0x2>
     596:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x3>
     59a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__mulsf3>
     59e:	6b a3       	std	Y+35, r22	; 0x23
     5a0:	7c a3       	std	Y+36, r23	; 0x24
     5a2:	8d a3       	std	Y+37, r24	; 0x25
     5a4:	9e a3       	std	Y+38, r25	; 0x26
		
		Xg = Gyro_x/16.4;
     5a6:	23 e3       	ldi	r18, 0x33	; 51
     5a8:	33 e3       	ldi	r19, 0x33	; 51
     5aa:	43 e8       	ldi	r20, 0x83	; 131
     5ac:	51 e4       	ldi	r21, 0x41	; 65
     5ae:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <Gyro_x>
     5b2:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <Gyro_x+0x1>
     5b6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Gyro_x+0x2>
     5ba:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <Gyro_x+0x3>
     5be:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
     5c2:	6f a3       	std	Y+39, r22	; 0x27
     5c4:	78 a7       	std	Y+40, r23	; 0x28
     5c6:	89 a7       	std	Y+41, r24	; 0x29
     5c8:	9a a7       	std	Y+42, r25	; 0x2a
		Yg = Gyro_y/16.4;
     5ca:	23 e3       	ldi	r18, 0x33	; 51
     5cc:	33 e3       	ldi	r19, 0x33	; 51
     5ce:	43 e8       	ldi	r20, 0x83	; 131
     5d0:	51 e4       	ldi	r21, 0x41	; 65
     5d2:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Gyro_y>
     5d6:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <Gyro_y+0x1>
     5da:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Gyro_y+0x2>
     5de:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <Gyro_y+0x3>
     5e2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
     5e6:	6b a7       	std	Y+43, r22	; 0x2b
     5e8:	7c a7       	std	Y+44, r23	; 0x2c
     5ea:	8d a7       	std	Y+45, r24	; 0x2d
     5ec:	9e a7       	std	Y+46, r25	; 0x2e
		Zg = Gyro_z/16.4;
     5ee:	23 e3       	ldi	r18, 0x33	; 51
     5f0:	33 e3       	ldi	r19, 0x33	; 51
     5f2:	43 e8       	ldi	r20, 0x83	; 131
     5f4:	51 e4       	ldi	r21, 0x41	; 65
     5f6:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <Gyro_z>
     5fa:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <Gyro_z+0x1>
     5fe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <Gyro_z+0x2>
     602:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <Gyro_z+0x3>
     606:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
     60a:	6f a7       	std	Y+47, r22	; 0x2f
     60c:	78 ab       	std	Y+48, r23	; 0x30
     60e:	89 ab       	std	Y+49, r24	; 0x31
     610:	9a ab       	std	Y+50, r25	; 0x32

		dtostrf( Xa, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e8       	ldi	r20, 0x80	; 128
     618:	58 e3       	ldi	r21, 0x38	; 56
     61a:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <Acc_x>
     61e:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <Acc_x+0x1>
     622:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <Acc_x+0x2>
     626:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <Acc_x+0x3>
     62a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__mulsf3>
     62e:	87 01       	movw	r16, r14
     630:	22 e0       	ldi	r18, 0x02	; 2
     632:	43 e0       	ldi	r20, 0x03	; 3
     634:	0e 94 77 05 	call	0xaee	; 0xaee <dtostrf>
		sprintf(buffer," Ax = %s g\t",float_);			/* This is where the value is being put as a string onto the buffer variable */
     638:	ff 92       	push	r15
     63a:	ef 92       	push	r14
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	df 92       	push	r13
     646:	cf 92       	push	r12
     648:	0e 94 97 05 	call	0xb2e	; 0xb2e <sprintf>
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
     64c:	c6 01       	movw	r24, r12
     64e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_SendString>

		dtostrf( Ya, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_v */
     652:	22 e0       	ldi	r18, 0x02	; 2
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	6f 8d       	ldd	r22, Y+31	; 0x1f
     658:	78 a1       	ldd	r23, Y+32	; 0x20
     65a:	89 a1       	ldd	r24, Y+33	; 0x21
     65c:	9a a1       	ldd	r25, Y+34	; 0x22
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <dtostrf>
		sprintf(buffer," Ay = %s g\t",float_);			/* This is where the value is being put as a string onto the buffer variable */
     662:	ff 92       	push	r15
     664:	ef 92       	push	r14
     666:	8c e0       	ldi	r24, 0x0C	; 12
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	9f 93       	push	r25
     66c:	8f 93       	push	r24
     66e:	df 92       	push	r13
     670:	cf 92       	push	r12
     672:	0e 94 97 05 	call	0xb2e	; 0xb2e <sprintf>
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
     676:	c6 01       	movw	r24, r12
     678:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_SendString>
		
		dtostrf( Za, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	43 e0       	ldi	r20, 0x03	; 3
     680:	6b a1       	ldd	r22, Y+35	; 0x23
     682:	7c a1       	ldd	r23, Y+36	; 0x24
     684:	8d a1       	ldd	r24, Y+37	; 0x25
     686:	9e a1       	ldd	r25, Y+38	; 0x26
     688:	0e 94 77 05 	call	0xaee	; 0xaee <dtostrf>
		sprintf(buffer," Az = %s g\t",float_);			/* This is where the value is being put as a string onto the buffer variable */
     68c:	ff 92       	push	r15
     68e:	ef 92       	push	r14
     690:	5f 92       	push	r5
     692:	4f 92       	push	r4
     694:	df 92       	push	r13
     696:	cf 92       	push	r12
     698:	0e 94 97 05 	call	0xb2e	; 0xb2e <sprintf>
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
     69c:	c6 01       	movw	r24, r12
     69e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_SendString>

		dtostrf( Xg, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	43 e0       	ldi	r20, 0x03	; 3
     6a6:	6f a1       	ldd	r22, Y+39	; 0x27
     6a8:	78 a5       	ldd	r23, Y+40	; 0x28
     6aa:	89 a5       	ldd	r24, Y+41	; 0x29
     6ac:	9a a5       	ldd	r25, Y+42	; 0x2a
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <dtostrf>
		sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);	/* This is where the value is being put as a string onto the buffer variable */
     6b2:	1f 92       	push	r1
     6b4:	3f 92       	push	r3
     6b6:	ff 92       	push	r15
     6b8:	ef 92       	push	r14
     6ba:	7f 92       	push	r7
     6bc:	6f 92       	push	r6
     6be:	df 92       	push	r13
     6c0:	cf 92       	push	r12
     6c2:	0e 94 97 05 	call	0xb2e	; 0xb2e <sprintf>
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
     6c6:	c6 01       	movw	r24, r12
     6c8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_SendString>

		dtostrf( Yg, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
     6cc:	22 e0       	ldi	r18, 0x02	; 2
     6ce:	43 e0       	ldi	r20, 0x03	; 3
     6d0:	6b a5       	ldd	r22, Y+43	; 0x2b
     6d2:	7c a5       	ldd	r23, Y+44	; 0x2c
     6d4:	8d a5       	ldd	r24, Y+45	; 0x2d
     6d6:	9e a5       	ldd	r25, Y+46	; 0x2e
     6d8:	0e 94 77 05 	call	0xaee	; 0xaee <dtostrf>
		sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);	/* This is where the value is being put as a string onto the buffer variable */
     6dc:	1f 92       	push	r1
     6de:	3f 92       	push	r3
     6e0:	ff 92       	push	r15
     6e2:	ef 92       	push	r14
     6e4:	9f 92       	push	r9
     6e6:	8f 92       	push	r8
     6e8:	df 92       	push	r13
     6ea:	cf 92       	push	r12
     6ec:	0e 94 97 05 	call	0xb2e	; 0xb2e <sprintf>
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	c6 01       	movw	r24, r12
     6fc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_SendString>
		
		dtostrf( Zg, 3, 2, float_ );					/* Takes the first parameter and formts is with size 3 precission 2 and puts it in float_ */
     700:	22 e0       	ldi	r18, 0x02	; 2
     702:	43 e0       	ldi	r20, 0x03	; 3
     704:	6f a5       	ldd	r22, Y+47	; 0x2f
     706:	78 a9       	ldd	r23, Y+48	; 0x30
     708:	89 a9       	ldd	r24, Y+49	; 0x31
     70a:	9a a9       	ldd	r25, Y+50	; 0x32
     70c:	0e 94 77 05 	call	0xaee	; 0xaee <dtostrf>
		sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);	/* This is where the value is being put as a string onto the buffer variable */
     710:	1f 92       	push	r1
     712:	3f 92       	push	r3
     714:	ff 92       	push	r15
     716:	ef 92       	push	r14
     718:	bf 92       	push	r11
     71a:	af 92       	push	r10
     71c:	df 92       	push	r13
     71e:	cf 92       	push	r12
     720:	0e 94 97 05 	call	0xb2e	; 0xb2e <sprintf>
		USART_SendString(buffer);						/* This is where it is being displayed on the serial terminal  */
     724:	c6 01       	movw	r24, r12
     726:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <USART_SendString>
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	23 ed       	ldi	r18, 0xD3	; 211
     72e:	80 e3       	ldi	r24, 0x30	; 48
     730:	91 50       	subi	r25, 0x01	; 1
     732:	20 40       	sbci	r18, 0x00	; 0
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	e1 f7       	brne	.-8      	; 0x730 <main+0x244>
     738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x24e>
     73a:	00 00       	nop
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	09 cf       	rjmp	.-494    	; 0x55a <main+0x6e>

00000748 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));				/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */
}
     748:	28 e1       	ldi	r18, 0x18	; 24
     74a:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	aa 1f       	adc	r26, r26
     758:	bb 1f       	adc	r27, r27
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	aa 1f       	adc	r26, r26
     760:	bb 1f       	adc	r27, r27
     762:	9c 01       	movw	r18, r24
     764:	ad 01       	movw	r20, r26
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	44 1f       	adc	r20, r20
     76c:	55 1f       	adc	r21, r21
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	44 1f       	adc	r20, r20
     774:	55 1f       	adc	r21, r21
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	74 e2       	ldi	r23, 0x24	; 36
     77a:	84 ef       	ldi	r24, 0xF4	; 244
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 55 05 	call	0xaaa	; 0xaaa <__udivmodsi4>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	82 0f       	add	r24, r18
     786:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     78a:	da 01       	movw	r26, r20
     78c:	c9 01       	movw	r24, r18
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	a1 09       	sbc	r26, r1
     792:	b1 09       	sbc	r27, r1
     794:	89 2f       	mov	r24, r25
     796:	9a 2f       	mov	r25, r26
     798:	ab 2f       	mov	r26, r27
     79a:	bb 27       	eor	r27, r27
     79c:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     7a0:	08 95       	ret

000007a2 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;									/* Write data to be transmitting in UDR */
     7a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     7a6:	e0 ec       	ldi	r30, 0xC0	; 192
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	85 ff       	sbrs	r24, 5
     7ae:	fd cf       	rjmp	.-6      	; 0x7aa <USART_TxChar+0x8>
}
     7b0:	08 95       	ret

000007b2 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
     7b8:	88 81       	ld	r24, Y
     7ba:	88 23       	and	r24, r24
     7bc:	31 f0       	breq	.+12     	; 0x7ca <USART_SendString+0x18>
     7be:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     7c0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     7c4:	89 91       	ld	r24, Y+
     7c6:	81 11       	cpse	r24, r1
     7c8:	fb cf       	rjmp	.-10     	; 0x7c0 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <__divsf3>:
     7d0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__divsf3x>
     7d4:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_round>
     7d8:	0e 94 a7 04 	call	0x94e	; 0x94e <__fp_pscB>
     7dc:	58 f0       	brcs	.+22     	; 0x7f4 <__divsf3+0x24>
     7de:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscA>
     7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__divsf3+0x24>
     7e4:	29 f4       	brne	.+10     	; 0x7f0 <__divsf3+0x20>
     7e6:	5f 3f       	cpi	r21, 0xFF	; 255
     7e8:	29 f0       	breq	.+10     	; 0x7f4 <__divsf3+0x24>
     7ea:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_inf>
     7ee:	51 11       	cpse	r21, r1
     7f0:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_szero>
     7f4:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__fp_nan>

000007f8 <__divsf3x>:
     7f8:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_split3>
     7fc:	68 f3       	brcs	.-38     	; 0x7d8 <__divsf3+0x8>

000007fe <__divsf3_pse>:
     7fe:	99 23       	and	r25, r25
     800:	b1 f3       	breq	.-20     	; 0x7ee <__divsf3+0x1e>
     802:	55 23       	and	r21, r21
     804:	91 f3       	breq	.-28     	; 0x7ea <__divsf3+0x1a>
     806:	95 1b       	sub	r25, r21
     808:	55 0b       	sbc	r21, r21
     80a:	bb 27       	eor	r27, r27
     80c:	aa 27       	eor	r26, r26
     80e:	62 17       	cp	r22, r18
     810:	73 07       	cpc	r23, r19
     812:	84 07       	cpc	r24, r20
     814:	38 f0       	brcs	.+14     	; 0x824 <__divsf3_pse+0x26>
     816:	9f 5f       	subi	r25, 0xFF	; 255
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
     81e:	44 1f       	adc	r20, r20
     820:	aa 1f       	adc	r26, r26
     822:	a9 f3       	breq	.-22     	; 0x80e <__divsf3_pse+0x10>
     824:	35 d0       	rcall	.+106    	; 0x890 <__divsf3_pse+0x92>
     826:	0e 2e       	mov	r0, r30
     828:	3a f0       	brmi	.+14     	; 0x838 <__divsf3_pse+0x3a>
     82a:	e0 e8       	ldi	r30, 0x80	; 128
     82c:	32 d0       	rcall	.+100    	; 0x892 <__divsf3_pse+0x94>
     82e:	91 50       	subi	r25, 0x01	; 1
     830:	50 40       	sbci	r21, 0x00	; 0
     832:	e6 95       	lsr	r30
     834:	00 1c       	adc	r0, r0
     836:	ca f7       	brpl	.-14     	; 0x82a <__divsf3_pse+0x2c>
     838:	2b d0       	rcall	.+86     	; 0x890 <__divsf3_pse+0x92>
     83a:	fe 2f       	mov	r31, r30
     83c:	29 d0       	rcall	.+82     	; 0x890 <__divsf3_pse+0x92>
     83e:	66 0f       	add	r22, r22
     840:	77 1f       	adc	r23, r23
     842:	88 1f       	adc	r24, r24
     844:	bb 1f       	adc	r27, r27
     846:	26 17       	cp	r18, r22
     848:	37 07       	cpc	r19, r23
     84a:	48 07       	cpc	r20, r24
     84c:	ab 07       	cpc	r26, r27
     84e:	b0 e8       	ldi	r27, 0x80	; 128
     850:	09 f0       	breq	.+2      	; 0x854 <__divsf3_pse+0x56>
     852:	bb 0b       	sbc	r27, r27
     854:	80 2d       	mov	r24, r0
     856:	bf 01       	movw	r22, r30
     858:	ff 27       	eor	r31, r31
     85a:	93 58       	subi	r25, 0x83	; 131
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	3a f0       	brmi	.+14     	; 0x86e <__divsf3_pse+0x70>
     860:	9e 3f       	cpi	r25, 0xFE	; 254
     862:	51 05       	cpc	r21, r1
     864:	78 f0       	brcs	.+30     	; 0x884 <__divsf3_pse+0x86>
     866:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_inf>
     86a:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_szero>
     86e:	5f 3f       	cpi	r21, 0xFF	; 255
     870:	e4 f3       	brlt	.-8      	; 0x86a <__divsf3_pse+0x6c>
     872:	98 3e       	cpi	r25, 0xE8	; 232
     874:	d4 f3       	brlt	.-12     	; 0x86a <__divsf3_pse+0x6c>
     876:	86 95       	lsr	r24
     878:	77 95       	ror	r23
     87a:	67 95       	ror	r22
     87c:	b7 95       	ror	r27
     87e:	f7 95       	ror	r31
     880:	9f 5f       	subi	r25, 0xFF	; 255
     882:	c9 f7       	brne	.-14     	; 0x876 <__divsf3_pse+0x78>
     884:	88 0f       	add	r24, r24
     886:	91 1d       	adc	r25, r1
     888:	96 95       	lsr	r25
     88a:	87 95       	ror	r24
     88c:	97 f9       	bld	r25, 7
     88e:	08 95       	ret
     890:	e1 e0       	ldi	r30, 0x01	; 1
     892:	66 0f       	add	r22, r22
     894:	77 1f       	adc	r23, r23
     896:	88 1f       	adc	r24, r24
     898:	bb 1f       	adc	r27, r27
     89a:	62 17       	cp	r22, r18
     89c:	73 07       	cpc	r23, r19
     89e:	84 07       	cpc	r24, r20
     8a0:	ba 07       	cpc	r27, r26
     8a2:	20 f0       	brcs	.+8      	; 0x8ac <__divsf3_pse+0xae>
     8a4:	62 1b       	sub	r22, r18
     8a6:	73 0b       	sbc	r23, r19
     8a8:	84 0b       	sbc	r24, r20
     8aa:	ba 0b       	sbc	r27, r26
     8ac:	ee 1f       	adc	r30, r30
     8ae:	88 f7       	brcc	.-30     	; 0x892 <__divsf3_pse+0x94>
     8b0:	e0 95       	com	r30
     8b2:	08 95       	ret

000008b4 <__floatunsisf>:
     8b4:	e8 94       	clt
     8b6:	09 c0       	rjmp	.+18     	; 0x8ca <__floatsisf+0x12>

000008b8 <__floatsisf>:
     8b8:	97 fb       	bst	r25, 7
     8ba:	3e f4       	brtc	.+14     	; 0x8ca <__floatsisf+0x12>
     8bc:	90 95       	com	r25
     8be:	80 95       	com	r24
     8c0:	70 95       	com	r23
     8c2:	61 95       	neg	r22
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	8f 4f       	sbci	r24, 0xFF	; 255
     8c8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ca:	99 23       	and	r25, r25
     8cc:	a9 f0       	breq	.+42     	; 0x8f8 <__floatsisf+0x40>
     8ce:	f9 2f       	mov	r31, r25
     8d0:	96 e9       	ldi	r25, 0x96	; 150
     8d2:	bb 27       	eor	r27, r27
     8d4:	93 95       	inc	r25
     8d6:	f6 95       	lsr	r31
     8d8:	87 95       	ror	r24
     8da:	77 95       	ror	r23
     8dc:	67 95       	ror	r22
     8de:	b7 95       	ror	r27
     8e0:	f1 11       	cpse	r31, r1
     8e2:	f8 cf       	rjmp	.-16     	; 0x8d4 <__floatsisf+0x1c>
     8e4:	fa f4       	brpl	.+62     	; 0x924 <__stack+0x25>
     8e6:	bb 0f       	add	r27, r27
     8e8:	11 f4       	brne	.+4      	; 0x8ee <__floatsisf+0x36>
     8ea:	60 ff       	sbrs	r22, 0
     8ec:	1b c0       	rjmp	.+54     	; 0x924 <__stack+0x25>
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	8f 4f       	sbci	r24, 0xFF	; 255
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	16 c0       	rjmp	.+44     	; 0x924 <__stack+0x25>
     8f8:	88 23       	and	r24, r24
     8fa:	11 f0       	breq	.+4      	; 0x900 <__stack+0x1>
     8fc:	96 e9       	ldi	r25, 0x96	; 150
     8fe:	11 c0       	rjmp	.+34     	; 0x922 <__stack+0x23>
     900:	77 23       	and	r23, r23
     902:	21 f0       	breq	.+8      	; 0x90c <__stack+0xd>
     904:	9e e8       	ldi	r25, 0x8E	; 142
     906:	87 2f       	mov	r24, r23
     908:	76 2f       	mov	r23, r22
     90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
     90c:	66 23       	and	r22, r22
     90e:	71 f0       	breq	.+28     	; 0x92c <__stack+0x2d>
     910:	96 e8       	ldi	r25, 0x86	; 134
     912:	86 2f       	mov	r24, r22
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	2a f0       	brmi	.+10     	; 0x924 <__stack+0x25>
     91a:	9a 95       	dec	r25
     91c:	66 0f       	add	r22, r22
     91e:	77 1f       	adc	r23, r23
     920:	88 1f       	adc	r24, r24
     922:	da f7       	brpl	.-10     	; 0x91a <__stack+0x1b>
     924:	88 0f       	add	r24, r24
     926:	96 95       	lsr	r25
     928:	87 95       	ror	r24
     92a:	97 f9       	bld	r25, 7
     92c:	08 95       	ret

0000092e <__fp_inf>:
     92e:	97 f9       	bld	r25, 7
     930:	9f 67       	ori	r25, 0x7F	; 127
     932:	80 e8       	ldi	r24, 0x80	; 128
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	08 95       	ret

0000093a <__fp_nan>:
     93a:	9f ef       	ldi	r25, 0xFF	; 255
     93c:	80 ec       	ldi	r24, 0xC0	; 192
     93e:	08 95       	ret

00000940 <__fp_pscA>:
     940:	00 24       	eor	r0, r0
     942:	0a 94       	dec	r0
     944:	16 16       	cp	r1, r22
     946:	17 06       	cpc	r1, r23
     948:	18 06       	cpc	r1, r24
     94a:	09 06       	cpc	r0, r25
     94c:	08 95       	ret

0000094e <__fp_pscB>:
     94e:	00 24       	eor	r0, r0
     950:	0a 94       	dec	r0
     952:	12 16       	cp	r1, r18
     954:	13 06       	cpc	r1, r19
     956:	14 06       	cpc	r1, r20
     958:	05 06       	cpc	r0, r21
     95a:	08 95       	ret

0000095c <__fp_round>:
     95c:	09 2e       	mov	r0, r25
     95e:	03 94       	inc	r0
     960:	00 0c       	add	r0, r0
     962:	11 f4       	brne	.+4      	; 0x968 <__fp_round+0xc>
     964:	88 23       	and	r24, r24
     966:	52 f0       	brmi	.+20     	; 0x97c <__fp_round+0x20>
     968:	bb 0f       	add	r27, r27
     96a:	40 f4       	brcc	.+16     	; 0x97c <__fp_round+0x20>
     96c:	bf 2b       	or	r27, r31
     96e:	11 f4       	brne	.+4      	; 0x974 <__fp_round+0x18>
     970:	60 ff       	sbrs	r22, 0
     972:	04 c0       	rjmp	.+8      	; 0x97c <__fp_round+0x20>
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	8f 4f       	sbci	r24, 0xFF	; 255
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	08 95       	ret

0000097e <__fp_split3>:
     97e:	57 fd       	sbrc	r21, 7
     980:	90 58       	subi	r25, 0x80	; 128
     982:	44 0f       	add	r20, r20
     984:	55 1f       	adc	r21, r21
     986:	59 f0       	breq	.+22     	; 0x99e <__fp_splitA+0x10>
     988:	5f 3f       	cpi	r21, 0xFF	; 255
     98a:	71 f0       	breq	.+28     	; 0x9a8 <__fp_splitA+0x1a>
     98c:	47 95       	ror	r20

0000098e <__fp_splitA>:
     98e:	88 0f       	add	r24, r24
     990:	97 fb       	bst	r25, 7
     992:	99 1f       	adc	r25, r25
     994:	61 f0       	breq	.+24     	; 0x9ae <__fp_splitA+0x20>
     996:	9f 3f       	cpi	r25, 0xFF	; 255
     998:	79 f0       	breq	.+30     	; 0x9b8 <__fp_splitA+0x2a>
     99a:	87 95       	ror	r24
     99c:	08 95       	ret
     99e:	12 16       	cp	r1, r18
     9a0:	13 06       	cpc	r1, r19
     9a2:	14 06       	cpc	r1, r20
     9a4:	55 1f       	adc	r21, r21
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <__fp_split3+0xe>
     9a8:	46 95       	lsr	r20
     9aa:	f1 df       	rcall	.-30     	; 0x98e <__fp_splitA>
     9ac:	08 c0       	rjmp	.+16     	; 0x9be <__fp_splitA+0x30>
     9ae:	16 16       	cp	r1, r22
     9b0:	17 06       	cpc	r1, r23
     9b2:	18 06       	cpc	r1, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	f1 cf       	rjmp	.-30     	; 0x99a <__fp_splitA+0xc>
     9b8:	86 95       	lsr	r24
     9ba:	71 05       	cpc	r23, r1
     9bc:	61 05       	cpc	r22, r1
     9be:	08 94       	sec
     9c0:	08 95       	ret

000009c2 <__fp_zero>:
     9c2:	e8 94       	clt

000009c4 <__fp_szero>:
     9c4:	bb 27       	eor	r27, r27
     9c6:	66 27       	eor	r22, r22
     9c8:	77 27       	eor	r23, r23
     9ca:	cb 01       	movw	r24, r22
     9cc:	97 f9       	bld	r25, 7
     9ce:	08 95       	ret

000009d0 <__mulsf3>:
     9d0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__mulsf3x>
     9d4:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__fp_round>
     9d8:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_pscA>
     9dc:	38 f0       	brcs	.+14     	; 0x9ec <__mulsf3+0x1c>
     9de:	0e 94 a7 04 	call	0x94e	; 0x94e <__fp_pscB>
     9e2:	20 f0       	brcs	.+8      	; 0x9ec <__mulsf3+0x1c>
     9e4:	95 23       	and	r25, r21
     9e6:	11 f0       	breq	.+4      	; 0x9ec <__mulsf3+0x1c>
     9e8:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_inf>
     9ec:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__fp_nan>
     9f0:	11 24       	eor	r1, r1
     9f2:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_szero>

000009f6 <__mulsf3x>:
     9f6:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_split3>
     9fa:	70 f3       	brcs	.-36     	; 0x9d8 <__mulsf3+0x8>

000009fc <__mulsf3_pse>:
     9fc:	95 9f       	mul	r25, r21
     9fe:	c1 f3       	breq	.-16     	; 0x9f0 <__mulsf3+0x20>
     a00:	95 0f       	add	r25, r21
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	55 1f       	adc	r21, r21
     a06:	62 9f       	mul	r22, r18
     a08:	f0 01       	movw	r30, r0
     a0a:	72 9f       	mul	r23, r18
     a0c:	bb 27       	eor	r27, r27
     a0e:	f0 0d       	add	r31, r0
     a10:	b1 1d       	adc	r27, r1
     a12:	63 9f       	mul	r22, r19
     a14:	aa 27       	eor	r26, r26
     a16:	f0 0d       	add	r31, r0
     a18:	b1 1d       	adc	r27, r1
     a1a:	aa 1f       	adc	r26, r26
     a1c:	64 9f       	mul	r22, r20
     a1e:	66 27       	eor	r22, r22
     a20:	b0 0d       	add	r27, r0
     a22:	a1 1d       	adc	r26, r1
     a24:	66 1f       	adc	r22, r22
     a26:	82 9f       	mul	r24, r18
     a28:	22 27       	eor	r18, r18
     a2a:	b0 0d       	add	r27, r0
     a2c:	a1 1d       	adc	r26, r1
     a2e:	62 1f       	adc	r22, r18
     a30:	73 9f       	mul	r23, r19
     a32:	b0 0d       	add	r27, r0
     a34:	a1 1d       	adc	r26, r1
     a36:	62 1f       	adc	r22, r18
     a38:	83 9f       	mul	r24, r19
     a3a:	a0 0d       	add	r26, r0
     a3c:	61 1d       	adc	r22, r1
     a3e:	22 1f       	adc	r18, r18
     a40:	74 9f       	mul	r23, r20
     a42:	33 27       	eor	r19, r19
     a44:	a0 0d       	add	r26, r0
     a46:	61 1d       	adc	r22, r1
     a48:	23 1f       	adc	r18, r19
     a4a:	84 9f       	mul	r24, r20
     a4c:	60 0d       	add	r22, r0
     a4e:	21 1d       	adc	r18, r1
     a50:	82 2f       	mov	r24, r18
     a52:	76 2f       	mov	r23, r22
     a54:	6a 2f       	mov	r22, r26
     a56:	11 24       	eor	r1, r1
     a58:	9f 57       	subi	r25, 0x7F	; 127
     a5a:	50 40       	sbci	r21, 0x00	; 0
     a5c:	9a f0       	brmi	.+38     	; 0xa84 <__mulsf3_pse+0x88>
     a5e:	f1 f0       	breq	.+60     	; 0xa9c <__mulsf3_pse+0xa0>
     a60:	88 23       	and	r24, r24
     a62:	4a f0       	brmi	.+18     	; 0xa76 <__mulsf3_pse+0x7a>
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	bb 1f       	adc	r27, r27
     a6a:	66 1f       	adc	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	88 1f       	adc	r24, r24
     a70:	91 50       	subi	r25, 0x01	; 1
     a72:	50 40       	sbci	r21, 0x00	; 0
     a74:	a9 f7       	brne	.-22     	; 0xa60 <__mulsf3_pse+0x64>
     a76:	9e 3f       	cpi	r25, 0xFE	; 254
     a78:	51 05       	cpc	r21, r1
     a7a:	80 f0       	brcs	.+32     	; 0xa9c <__mulsf3_pse+0xa0>
     a7c:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_inf>
     a80:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_szero>
     a84:	5f 3f       	cpi	r21, 0xFF	; 255
     a86:	e4 f3       	brlt	.-8      	; 0xa80 <__mulsf3_pse+0x84>
     a88:	98 3e       	cpi	r25, 0xE8	; 232
     a8a:	d4 f3       	brlt	.-12     	; 0xa80 <__mulsf3_pse+0x84>
     a8c:	86 95       	lsr	r24
     a8e:	77 95       	ror	r23
     a90:	67 95       	ror	r22
     a92:	b7 95       	ror	r27
     a94:	f7 95       	ror	r31
     a96:	e7 95       	ror	r30
     a98:	9f 5f       	subi	r25, 0xFF	; 255
     a9a:	c1 f7       	brne	.-16     	; 0xa8c <__mulsf3_pse+0x90>
     a9c:	fe 2b       	or	r31, r30
     a9e:	88 0f       	add	r24, r24
     aa0:	91 1d       	adc	r25, r1
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	97 f9       	bld	r25, 7
     aa8:	08 95       	ret

00000aaa <__udivmodsi4>:
     aaa:	a1 e2       	ldi	r26, 0x21	; 33
     aac:	1a 2e       	mov	r1, r26
     aae:	aa 1b       	sub	r26, r26
     ab0:	bb 1b       	sub	r27, r27
     ab2:	fd 01       	movw	r30, r26
     ab4:	0d c0       	rjmp	.+26     	; 0xad0 <__udivmodsi4_ep>

00000ab6 <__udivmodsi4_loop>:
     ab6:	aa 1f       	adc	r26, r26
     ab8:	bb 1f       	adc	r27, r27
     aba:	ee 1f       	adc	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	a2 17       	cp	r26, r18
     ac0:	b3 07       	cpc	r27, r19
     ac2:	e4 07       	cpc	r30, r20
     ac4:	f5 07       	cpc	r31, r21
     ac6:	20 f0       	brcs	.+8      	; 0xad0 <__udivmodsi4_ep>
     ac8:	a2 1b       	sub	r26, r18
     aca:	b3 0b       	sbc	r27, r19
     acc:	e4 0b       	sbc	r30, r20
     ace:	f5 0b       	sbc	r31, r21

00000ad0 <__udivmodsi4_ep>:
     ad0:	66 1f       	adc	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	88 1f       	adc	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	1a 94       	dec	r1
     ada:	69 f7       	brne	.-38     	; 0xab6 <__udivmodsi4_loop>
     adc:	60 95       	com	r22
     ade:	70 95       	com	r23
     ae0:	80 95       	com	r24
     ae2:	90 95       	com	r25
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	bd 01       	movw	r22, r26
     aea:	cf 01       	movw	r24, r30
     aec:	08 95       	ret

00000aee <dtostrf>:
     aee:	ef 92       	push	r14
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	e8 01       	movw	r28, r16
     afa:	47 fd       	sbrc	r20, 7
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <dtostrf+0x14>
     afe:	34 e0       	ldi	r19, 0x04	; 4
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <dtostrf+0x16>
     b02:	34 e1       	ldi	r19, 0x14	; 20
     b04:	04 2e       	mov	r0, r20
     b06:	00 0c       	add	r0, r0
     b08:	55 0b       	sbc	r21, r21
     b0a:	57 ff       	sbrs	r21, 7
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <dtostrf+0x26>
     b0e:	51 95       	neg	r21
     b10:	41 95       	neg	r20
     b12:	51 09       	sbc	r21, r1
     b14:	e3 2e       	mov	r14, r19
     b16:	02 2f       	mov	r16, r18
     b18:	24 2f       	mov	r18, r20
     b1a:	ae 01       	movw	r20, r28
     b1c:	0e 94 9a 07 	call	0xf34	; 0xf34 <dtoa_prf>
     b20:	ce 01       	movw	r24, r28
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ef 90       	pop	r14
     b2c:	08 95       	ret

00000b2e <sprintf>:
     b2e:	ae e0       	ldi	r26, 0x0E	; 14
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__prologue_saves__+0x1c>
     b3a:	0d 89       	ldd	r16, Y+21	; 0x15
     b3c:	1e 89       	ldd	r17, Y+22	; 0x16
     b3e:	86 e0       	ldi	r24, 0x06	; 6
     b40:	8c 83       	std	Y+4, r24	; 0x04
     b42:	1a 83       	std	Y+2, r17	; 0x02
     b44:	09 83       	std	Y+1, r16	; 0x01
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	9f e7       	ldi	r25, 0x7F	; 127
     b4a:	9e 83       	std	Y+6, r25	; 0x06
     b4c:	8d 83       	std	Y+5, r24	; 0x05
     b4e:	ae 01       	movw	r20, r28
     b50:	47 5e       	subi	r20, 0xE7	; 231
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	6f 89       	ldd	r22, Y+23	; 0x17
     b56:	78 8d       	ldd	r23, Y+24	; 0x18
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	0e 94 b9 05 	call	0xb72	; 0xb72 <vfprintf>
     b60:	ef 81       	ldd	r30, Y+7	; 0x07
     b62:	f8 85       	ldd	r31, Y+8	; 0x08
     b64:	e0 0f       	add	r30, r16
     b66:	f1 1f       	adc	r31, r17
     b68:	10 82       	st	Z, r1
     b6a:	2e 96       	adiw	r28, 0x0e	; 14
     b6c:	e4 e0       	ldi	r30, 0x04	; 4
     b6e:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__epilogue_restores__+0x1c>

00000b72 <vfprintf>:
     b72:	ab e0       	ldi	r26, 0x0B	; 11
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ef eb       	ldi	r30, 0xBF	; 191
     b78:	f5 e0       	ldi	r31, 0x05	; 5
     b7a:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__prologue_saves__>
     b7e:	6c 01       	movw	r12, r24
     b80:	7b 01       	movw	r14, r22
     b82:	8a 01       	movw	r16, r20
     b84:	fc 01       	movw	r30, r24
     b86:	17 82       	std	Z+7, r1	; 0x07
     b88:	16 82       	std	Z+6, r1	; 0x06
     b8a:	83 81       	ldd	r24, Z+3	; 0x03
     b8c:	81 ff       	sbrs	r24, 1
     b8e:	cc c1       	rjmp	.+920    	; 0xf28 <vfprintf+0x3b6>
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	3c 01       	movw	r6, r24
     b96:	f6 01       	movw	r30, r12
     b98:	93 81       	ldd	r25, Z+3	; 0x03
     b9a:	f7 01       	movw	r30, r14
     b9c:	93 fd       	sbrc	r25, 3
     b9e:	85 91       	lpm	r24, Z+
     ba0:	93 ff       	sbrs	r25, 3
     ba2:	81 91       	ld	r24, Z+
     ba4:	7f 01       	movw	r14, r30
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <vfprintf+0x3a>
     baa:	ba c1       	rjmp	.+884    	; 0xf20 <vfprintf+0x3ae>
     bac:	85 32       	cpi	r24, 0x25	; 37
     bae:	39 f4       	brne	.+14     	; 0xbbe <vfprintf+0x4c>
     bb0:	93 fd       	sbrc	r25, 3
     bb2:	85 91       	lpm	r24, Z+
     bb4:	93 ff       	sbrs	r25, 3
     bb6:	81 91       	ld	r24, Z+
     bb8:	7f 01       	movw	r14, r30
     bba:	85 32       	cpi	r24, 0x25	; 37
     bbc:	29 f4       	brne	.+10     	; 0xbc8 <vfprintf+0x56>
     bbe:	b6 01       	movw	r22, r12
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     bc6:	e7 cf       	rjmp	.-50     	; 0xb96 <vfprintf+0x24>
     bc8:	91 2c       	mov	r9, r1
     bca:	21 2c       	mov	r2, r1
     bcc:	31 2c       	mov	r3, r1
     bce:	ff e1       	ldi	r31, 0x1F	; 31
     bd0:	f3 15       	cp	r31, r3
     bd2:	d8 f0       	brcs	.+54     	; 0xc0a <vfprintf+0x98>
     bd4:	8b 32       	cpi	r24, 0x2B	; 43
     bd6:	79 f0       	breq	.+30     	; 0xbf6 <vfprintf+0x84>
     bd8:	38 f4       	brcc	.+14     	; 0xbe8 <vfprintf+0x76>
     bda:	80 32       	cpi	r24, 0x20	; 32
     bdc:	79 f0       	breq	.+30     	; 0xbfc <vfprintf+0x8a>
     bde:	83 32       	cpi	r24, 0x23	; 35
     be0:	a1 f4       	brne	.+40     	; 0xc0a <vfprintf+0x98>
     be2:	23 2d       	mov	r18, r3
     be4:	20 61       	ori	r18, 0x10	; 16
     be6:	1d c0       	rjmp	.+58     	; 0xc22 <vfprintf+0xb0>
     be8:	8d 32       	cpi	r24, 0x2D	; 45
     bea:	61 f0       	breq	.+24     	; 0xc04 <vfprintf+0x92>
     bec:	80 33       	cpi	r24, 0x30	; 48
     bee:	69 f4       	brne	.+26     	; 0xc0a <vfprintf+0x98>
     bf0:	23 2d       	mov	r18, r3
     bf2:	21 60       	ori	r18, 0x01	; 1
     bf4:	16 c0       	rjmp	.+44     	; 0xc22 <vfprintf+0xb0>
     bf6:	83 2d       	mov	r24, r3
     bf8:	82 60       	ori	r24, 0x02	; 2
     bfa:	38 2e       	mov	r3, r24
     bfc:	e3 2d       	mov	r30, r3
     bfe:	e4 60       	ori	r30, 0x04	; 4
     c00:	3e 2e       	mov	r3, r30
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <vfprintf+0xe6>
     c04:	f3 2d       	mov	r31, r3
     c06:	f8 60       	ori	r31, 0x08	; 8
     c08:	1d c0       	rjmp	.+58     	; 0xc44 <vfprintf+0xd2>
     c0a:	37 fc       	sbrc	r3, 7
     c0c:	2d c0       	rjmp	.+90     	; 0xc68 <vfprintf+0xf6>
     c0e:	20 ed       	ldi	r18, 0xD0	; 208
     c10:	28 0f       	add	r18, r24
     c12:	2a 30       	cpi	r18, 0x0A	; 10
     c14:	40 f0       	brcs	.+16     	; 0xc26 <vfprintf+0xb4>
     c16:	8e 32       	cpi	r24, 0x2E	; 46
     c18:	b9 f4       	brne	.+46     	; 0xc48 <vfprintf+0xd6>
     c1a:	36 fc       	sbrc	r3, 6
     c1c:	81 c1       	rjmp	.+770    	; 0xf20 <vfprintf+0x3ae>
     c1e:	23 2d       	mov	r18, r3
     c20:	20 64       	ori	r18, 0x40	; 64
     c22:	32 2e       	mov	r3, r18
     c24:	19 c0       	rjmp	.+50     	; 0xc58 <vfprintf+0xe6>
     c26:	36 fe       	sbrs	r3, 6
     c28:	06 c0       	rjmp	.+12     	; 0xc36 <vfprintf+0xc4>
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	98 9e       	mul	r9, r24
     c2e:	20 0d       	add	r18, r0
     c30:	11 24       	eor	r1, r1
     c32:	92 2e       	mov	r9, r18
     c34:	11 c0       	rjmp	.+34     	; 0xc58 <vfprintf+0xe6>
     c36:	ea e0       	ldi	r30, 0x0A	; 10
     c38:	2e 9e       	mul	r2, r30
     c3a:	20 0d       	add	r18, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	22 2e       	mov	r2, r18
     c40:	f3 2d       	mov	r31, r3
     c42:	f0 62       	ori	r31, 0x20	; 32
     c44:	3f 2e       	mov	r3, r31
     c46:	08 c0       	rjmp	.+16     	; 0xc58 <vfprintf+0xe6>
     c48:	8c 36       	cpi	r24, 0x6C	; 108
     c4a:	21 f4       	brne	.+8      	; 0xc54 <vfprintf+0xe2>
     c4c:	83 2d       	mov	r24, r3
     c4e:	80 68       	ori	r24, 0x80	; 128
     c50:	38 2e       	mov	r3, r24
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0xe6>
     c54:	88 36       	cpi	r24, 0x68	; 104
     c56:	41 f4       	brne	.+16     	; 0xc68 <vfprintf+0xf6>
     c58:	f7 01       	movw	r30, r14
     c5a:	93 fd       	sbrc	r25, 3
     c5c:	85 91       	lpm	r24, Z+
     c5e:	93 ff       	sbrs	r25, 3
     c60:	81 91       	ld	r24, Z+
     c62:	7f 01       	movw	r14, r30
     c64:	81 11       	cpse	r24, r1
     c66:	b3 cf       	rjmp	.-154    	; 0xbce <vfprintf+0x5c>
     c68:	98 2f       	mov	r25, r24
     c6a:	9f 7d       	andi	r25, 0xDF	; 223
     c6c:	95 54       	subi	r25, 0x45	; 69
     c6e:	93 30       	cpi	r25, 0x03	; 3
     c70:	28 f4       	brcc	.+10     	; 0xc7c <vfprintf+0x10a>
     c72:	0c 5f       	subi	r16, 0xFC	; 252
     c74:	1f 4f       	sbci	r17, 0xFF	; 255
     c76:	9f e3       	ldi	r25, 0x3F	; 63
     c78:	99 83       	std	Y+1, r25	; 0x01
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <vfprintf+0x124>
     c7c:	83 36       	cpi	r24, 0x63	; 99
     c7e:	31 f0       	breq	.+12     	; 0xc8c <vfprintf+0x11a>
     c80:	83 37       	cpi	r24, 0x73	; 115
     c82:	71 f0       	breq	.+28     	; 0xca0 <vfprintf+0x12e>
     c84:	83 35       	cpi	r24, 0x53	; 83
     c86:	09 f0       	breq	.+2      	; 0xc8a <vfprintf+0x118>
     c88:	59 c0       	rjmp	.+178    	; 0xd3c <vfprintf+0x1ca>
     c8a:	21 c0       	rjmp	.+66     	; 0xcce <vfprintf+0x15c>
     c8c:	f8 01       	movw	r30, r16
     c8e:	80 81       	ld	r24, Z
     c90:	89 83       	std	Y+1, r24	; 0x01
     c92:	0e 5f       	subi	r16, 0xFE	; 254
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	88 24       	eor	r8, r8
     c98:	83 94       	inc	r8
     c9a:	91 2c       	mov	r9, r1
     c9c:	53 01       	movw	r10, r6
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <vfprintf+0x154>
     ca0:	28 01       	movw	r4, r16
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	4f 0e       	add	r4, r31
     ca6:	51 1c       	adc	r5, r1
     ca8:	f8 01       	movw	r30, r16
     caa:	a0 80       	ld	r10, Z
     cac:	b1 80       	ldd	r11, Z+1	; 0x01
     cae:	36 fe       	sbrs	r3, 6
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <vfprintf+0x146>
     cb2:	69 2d       	mov	r22, r9
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <vfprintf+0x14a>
     cb8:	6f ef       	ldi	r22, 0xFF	; 255
     cba:	7f ef       	ldi	r23, 0xFF	; 255
     cbc:	c5 01       	movw	r24, r10
     cbe:	0e 94 d7 09 	call	0x13ae	; 0x13ae <strnlen>
     cc2:	4c 01       	movw	r8, r24
     cc4:	82 01       	movw	r16, r4
     cc6:	f3 2d       	mov	r31, r3
     cc8:	ff 77       	andi	r31, 0x7F	; 127
     cca:	3f 2e       	mov	r3, r31
     ccc:	16 c0       	rjmp	.+44     	; 0xcfa <vfprintf+0x188>
     cce:	28 01       	movw	r4, r16
     cd0:	22 e0       	ldi	r18, 0x02	; 2
     cd2:	42 0e       	add	r4, r18
     cd4:	51 1c       	adc	r5, r1
     cd6:	f8 01       	movw	r30, r16
     cd8:	a0 80       	ld	r10, Z
     cda:	b1 80       	ldd	r11, Z+1	; 0x01
     cdc:	36 fe       	sbrs	r3, 6
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <vfprintf+0x174>
     ce0:	69 2d       	mov	r22, r9
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <vfprintf+0x178>
     ce6:	6f ef       	ldi	r22, 0xFF	; 255
     ce8:	7f ef       	ldi	r23, 0xFF	; 255
     cea:	c5 01       	movw	r24, r10
     cec:	0e 94 cc 09 	call	0x1398	; 0x1398 <strnlen_P>
     cf0:	4c 01       	movw	r8, r24
     cf2:	f3 2d       	mov	r31, r3
     cf4:	f0 68       	ori	r31, 0x80	; 128
     cf6:	3f 2e       	mov	r3, r31
     cf8:	82 01       	movw	r16, r4
     cfa:	33 fc       	sbrc	r3, 3
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <vfprintf+0x1c2>
     cfe:	82 2d       	mov	r24, r2
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	88 16       	cp	r8, r24
     d04:	99 06       	cpc	r9, r25
     d06:	b0 f4       	brcc	.+44     	; 0xd34 <vfprintf+0x1c2>
     d08:	b6 01       	movw	r22, r12
     d0a:	80 e2       	ldi	r24, 0x20	; 32
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     d12:	2a 94       	dec	r2
     d14:	f4 cf       	rjmp	.-24     	; 0xcfe <vfprintf+0x18c>
     d16:	f5 01       	movw	r30, r10
     d18:	37 fc       	sbrc	r3, 7
     d1a:	85 91       	lpm	r24, Z+
     d1c:	37 fe       	sbrs	r3, 7
     d1e:	81 91       	ld	r24, Z+
     d20:	5f 01       	movw	r10, r30
     d22:	b6 01       	movw	r22, r12
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     d2a:	21 10       	cpse	r2, r1
     d2c:	2a 94       	dec	r2
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	82 1a       	sub	r8, r18
     d32:	91 08       	sbc	r9, r1
     d34:	81 14       	cp	r8, r1
     d36:	91 04       	cpc	r9, r1
     d38:	71 f7       	brne	.-36     	; 0xd16 <vfprintf+0x1a4>
     d3a:	e8 c0       	rjmp	.+464    	; 0xf0c <vfprintf+0x39a>
     d3c:	84 36       	cpi	r24, 0x64	; 100
     d3e:	11 f0       	breq	.+4      	; 0xd44 <vfprintf+0x1d2>
     d40:	89 36       	cpi	r24, 0x69	; 105
     d42:	41 f5       	brne	.+80     	; 0xd94 <vfprintf+0x222>
     d44:	f8 01       	movw	r30, r16
     d46:	37 fe       	sbrs	r3, 7
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <vfprintf+0x1e6>
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	0c 5f       	subi	r16, 0xFC	; 252
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	08 c0       	rjmp	.+16     	; 0xd68 <vfprintf+0x1f6>
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	07 2e       	mov	r0, r23
     d5e:	00 0c       	add	r0, r0
     d60:	88 0b       	sbc	r24, r24
     d62:	99 0b       	sbc	r25, r25
     d64:	0e 5f       	subi	r16, 0xFE	; 254
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	f3 2d       	mov	r31, r3
     d6a:	ff 76       	andi	r31, 0x6F	; 111
     d6c:	3f 2e       	mov	r3, r31
     d6e:	97 ff       	sbrs	r25, 7
     d70:	09 c0       	rjmp	.+18     	; 0xd84 <vfprintf+0x212>
     d72:	90 95       	com	r25
     d74:	80 95       	com	r24
     d76:	70 95       	com	r23
     d78:	61 95       	neg	r22
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	8f 4f       	sbci	r24, 0xFF	; 255
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	f0 68       	ori	r31, 0x80	; 128
     d82:	3f 2e       	mov	r3, r31
     d84:	2a e0       	ldi	r18, 0x0A	; 10
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	a3 01       	movw	r20, r6
     d8a:	0e 94 1e 0a 	call	0x143c	; 0x143c <__ultoa_invert>
     d8e:	88 2e       	mov	r8, r24
     d90:	86 18       	sub	r8, r6
     d92:	45 c0       	rjmp	.+138    	; 0xe1e <vfprintf+0x2ac>
     d94:	85 37       	cpi	r24, 0x75	; 117
     d96:	31 f4       	brne	.+12     	; 0xda4 <vfprintf+0x232>
     d98:	23 2d       	mov	r18, r3
     d9a:	2f 7e       	andi	r18, 0xEF	; 239
     d9c:	b2 2e       	mov	r11, r18
     d9e:	2a e0       	ldi	r18, 0x0A	; 10
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	25 c0       	rjmp	.+74     	; 0xdee <vfprintf+0x27c>
     da4:	93 2d       	mov	r25, r3
     da6:	99 7f       	andi	r25, 0xF9	; 249
     da8:	b9 2e       	mov	r11, r25
     daa:	8f 36       	cpi	r24, 0x6F	; 111
     dac:	c1 f0       	breq	.+48     	; 0xdde <vfprintf+0x26c>
     dae:	18 f4       	brcc	.+6      	; 0xdb6 <vfprintf+0x244>
     db0:	88 35       	cpi	r24, 0x58	; 88
     db2:	79 f0       	breq	.+30     	; 0xdd2 <vfprintf+0x260>
     db4:	b5 c0       	rjmp	.+362    	; 0xf20 <vfprintf+0x3ae>
     db6:	80 37       	cpi	r24, 0x70	; 112
     db8:	19 f0       	breq	.+6      	; 0xdc0 <vfprintf+0x24e>
     dba:	88 37       	cpi	r24, 0x78	; 120
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <vfprintf+0x254>
     dbe:	b0 c0       	rjmp	.+352    	; 0xf20 <vfprintf+0x3ae>
     dc0:	e9 2f       	mov	r30, r25
     dc2:	e0 61       	ori	r30, 0x10	; 16
     dc4:	be 2e       	mov	r11, r30
     dc6:	b4 fe       	sbrs	r11, 4
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <vfprintf+0x272>
     dca:	fb 2d       	mov	r31, r11
     dcc:	f4 60       	ori	r31, 0x04	; 4
     dce:	bf 2e       	mov	r11, r31
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <vfprintf+0x272>
     dd2:	34 fe       	sbrs	r3, 4
     dd4:	0a c0       	rjmp	.+20     	; 0xdea <vfprintf+0x278>
     dd6:	29 2f       	mov	r18, r25
     dd8:	26 60       	ori	r18, 0x06	; 6
     dda:	b2 2e       	mov	r11, r18
     ddc:	06 c0       	rjmp	.+12     	; 0xdea <vfprintf+0x278>
     dde:	28 e0       	ldi	r18, 0x08	; 8
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <vfprintf+0x27c>
     de4:	20 e1       	ldi	r18, 0x10	; 16
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <vfprintf+0x27c>
     dea:	20 e1       	ldi	r18, 0x10	; 16
     dec:	32 e0       	ldi	r19, 0x02	; 2
     dee:	f8 01       	movw	r30, r16
     df0:	b7 fe       	sbrs	r11, 7
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <vfprintf+0x290>
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	0c 5f       	subi	r16, 0xFC	; 252
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <vfprintf+0x29c>
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 5f       	subi	r16, 0xFE	; 254
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	a3 01       	movw	r20, r6
     e10:	0e 94 1e 0a 	call	0x143c	; 0x143c <__ultoa_invert>
     e14:	88 2e       	mov	r8, r24
     e16:	86 18       	sub	r8, r6
     e18:	fb 2d       	mov	r31, r11
     e1a:	ff 77       	andi	r31, 0x7F	; 127
     e1c:	3f 2e       	mov	r3, r31
     e1e:	36 fe       	sbrs	r3, 6
     e20:	0d c0       	rjmp	.+26     	; 0xe3c <vfprintf+0x2ca>
     e22:	23 2d       	mov	r18, r3
     e24:	2e 7f       	andi	r18, 0xFE	; 254
     e26:	a2 2e       	mov	r10, r18
     e28:	89 14       	cp	r8, r9
     e2a:	58 f4       	brcc	.+22     	; 0xe42 <vfprintf+0x2d0>
     e2c:	34 fe       	sbrs	r3, 4
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <vfprintf+0x2d4>
     e30:	32 fc       	sbrc	r3, 2
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <vfprintf+0x2d4>
     e34:	83 2d       	mov	r24, r3
     e36:	8e 7e       	andi	r24, 0xEE	; 238
     e38:	a8 2e       	mov	r10, r24
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <vfprintf+0x2d4>
     e3c:	b8 2c       	mov	r11, r8
     e3e:	a3 2c       	mov	r10, r3
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <vfprintf+0x2d6>
     e42:	b8 2c       	mov	r11, r8
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <vfprintf+0x2d6>
     e46:	b9 2c       	mov	r11, r9
     e48:	a4 fe       	sbrs	r10, 4
     e4a:	0f c0       	rjmp	.+30     	; 0xe6a <vfprintf+0x2f8>
     e4c:	fe 01       	movw	r30, r28
     e4e:	e8 0d       	add	r30, r8
     e50:	f1 1d       	adc	r31, r1
     e52:	80 81       	ld	r24, Z
     e54:	80 33       	cpi	r24, 0x30	; 48
     e56:	21 f4       	brne	.+8      	; 0xe60 <vfprintf+0x2ee>
     e58:	9a 2d       	mov	r25, r10
     e5a:	99 7e       	andi	r25, 0xE9	; 233
     e5c:	a9 2e       	mov	r10, r25
     e5e:	09 c0       	rjmp	.+18     	; 0xe72 <vfprintf+0x300>
     e60:	a2 fe       	sbrs	r10, 2
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <vfprintf+0x2fe>
     e64:	b3 94       	inc	r11
     e66:	b3 94       	inc	r11
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <vfprintf+0x300>
     e6a:	8a 2d       	mov	r24, r10
     e6c:	86 78       	andi	r24, 0x86	; 134
     e6e:	09 f0       	breq	.+2      	; 0xe72 <vfprintf+0x300>
     e70:	b3 94       	inc	r11
     e72:	a3 fc       	sbrc	r10, 3
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <vfprintf+0x326>
     e76:	a0 fe       	sbrs	r10, 0
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <vfprintf+0x314>
     e7a:	b2 14       	cp	r11, r2
     e7c:	88 f4       	brcc	.+34     	; 0xea0 <vfprintf+0x32e>
     e7e:	28 0c       	add	r2, r8
     e80:	92 2c       	mov	r9, r2
     e82:	9b 18       	sub	r9, r11
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <vfprintf+0x330>
     e86:	b2 14       	cp	r11, r2
     e88:	60 f4       	brcc	.+24     	; 0xea2 <vfprintf+0x330>
     e8a:	b6 01       	movw	r22, r12
     e8c:	80 e2       	ldi	r24, 0x20	; 32
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     e94:	b3 94       	inc	r11
     e96:	f7 cf       	rjmp	.-18     	; 0xe86 <vfprintf+0x314>
     e98:	b2 14       	cp	r11, r2
     e9a:	18 f4       	brcc	.+6      	; 0xea2 <vfprintf+0x330>
     e9c:	2b 18       	sub	r2, r11
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <vfprintf+0x332>
     ea0:	98 2c       	mov	r9, r8
     ea2:	21 2c       	mov	r2, r1
     ea4:	a4 fe       	sbrs	r10, 4
     ea6:	10 c0       	rjmp	.+32     	; 0xec8 <vfprintf+0x356>
     ea8:	b6 01       	movw	r22, r12
     eaa:	80 e3       	ldi	r24, 0x30	; 48
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     eb2:	a2 fe       	sbrs	r10, 2
     eb4:	17 c0       	rjmp	.+46     	; 0xee4 <vfprintf+0x372>
     eb6:	a1 fc       	sbrc	r10, 1
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <vfprintf+0x34e>
     eba:	88 e7       	ldi	r24, 0x78	; 120
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x352>
     ec0:	88 e5       	ldi	r24, 0x58	; 88
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	b6 01       	movw	r22, r12
     ec6:	0c c0       	rjmp	.+24     	; 0xee0 <vfprintf+0x36e>
     ec8:	8a 2d       	mov	r24, r10
     eca:	86 78       	andi	r24, 0x86	; 134
     ecc:	59 f0       	breq	.+22     	; 0xee4 <vfprintf+0x372>
     ece:	a1 fe       	sbrs	r10, 1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x364>
     ed2:	8b e2       	ldi	r24, 0x2B	; 43
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <vfprintf+0x366>
     ed6:	80 e2       	ldi	r24, 0x20	; 32
     ed8:	a7 fc       	sbrc	r10, 7
     eda:	8d e2       	ldi	r24, 0x2D	; 45
     edc:	b6 01       	movw	r22, r12
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     ee4:	89 14       	cp	r8, r9
     ee6:	38 f4       	brcc	.+14     	; 0xef6 <vfprintf+0x384>
     ee8:	b6 01       	movw	r22, r12
     eea:	80 e3       	ldi	r24, 0x30	; 48
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     ef2:	9a 94       	dec	r9
     ef4:	f7 cf       	rjmp	.-18     	; 0xee4 <vfprintf+0x372>
     ef6:	8a 94       	dec	r8
     ef8:	f3 01       	movw	r30, r6
     efa:	e8 0d       	add	r30, r8
     efc:	f1 1d       	adc	r31, r1
     efe:	80 81       	ld	r24, Z
     f00:	b6 01       	movw	r22, r12
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     f08:	81 10       	cpse	r8, r1
     f0a:	f5 cf       	rjmp	.-22     	; 0xef6 <vfprintf+0x384>
     f0c:	22 20       	and	r2, r2
     f0e:	09 f4       	brne	.+2      	; 0xf12 <vfprintf+0x3a0>
     f10:	42 ce       	rjmp	.-892    	; 0xb96 <vfprintf+0x24>
     f12:	b6 01       	movw	r22, r12
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
     f1c:	2a 94       	dec	r2
     f1e:	f6 cf       	rjmp	.-20     	; 0xf0c <vfprintf+0x39a>
     f20:	f6 01       	movw	r30, r12
     f22:	86 81       	ldd	r24, Z+6	; 0x06
     f24:	97 81       	ldd	r25, Z+7	; 0x07
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <vfprintf+0x3ba>
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	2b 96       	adiw	r28, 0x0b	; 11
     f2e:	e2 e1       	ldi	r30, 0x12	; 18
     f30:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__epilogue_restores__>

00000f34 <dtoa_prf>:
     f34:	a9 e0       	ldi	r26, 0x09	; 9
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e0 ea       	ldi	r30, 0xA0	; 160
     f3a:	f7 e0       	ldi	r31, 0x07	; 7
     f3c:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__prologue_saves__+0xc>
     f40:	6a 01       	movw	r12, r20
     f42:	12 2f       	mov	r17, r18
     f44:	b0 2e       	mov	r11, r16
     f46:	2b e3       	ldi	r18, 0x3B	; 59
     f48:	20 17       	cp	r18, r16
     f4a:	20 f0       	brcs	.+8      	; 0xf54 <dtoa_prf+0x20>
     f4c:	ff 24       	eor	r15, r15
     f4e:	f3 94       	inc	r15
     f50:	f0 0e       	add	r15, r16
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <dtoa_prf+0x24>
     f54:	2c e3       	ldi	r18, 0x3C	; 60
     f56:	f2 2e       	mov	r15, r18
     f58:	0f 2d       	mov	r16, r15
     f5a:	27 e0       	ldi	r18, 0x07	; 7
     f5c:	ae 01       	movw	r20, r28
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__ftoa_engine>
     f66:	bc 01       	movw	r22, r24
     f68:	49 81       	ldd	r20, Y+1	; 0x01
     f6a:	84 2f       	mov	r24, r20
     f6c:	89 70       	andi	r24, 0x09	; 9
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	31 f0       	breq	.+12     	; 0xf7e <dtoa_prf+0x4a>
     f72:	e1 fc       	sbrc	r14, 1
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <dtoa_prf+0x4e>
     f76:	e0 fe       	sbrs	r14, 0
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <dtoa_prf+0x52>
     f7a:	90 e2       	ldi	r25, 0x20	; 32
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <dtoa_prf+0x54>
     f7e:	9d e2       	ldi	r25, 0x2D	; 45
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <dtoa_prf+0x54>
     f82:	9b e2       	ldi	r25, 0x2B	; 43
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <dtoa_prf+0x54>
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	5e 2d       	mov	r21, r14
     f8a:	50 71       	andi	r21, 0x10	; 16
     f8c:	43 ff       	sbrs	r20, 3
     f8e:	3c c0       	rjmp	.+120    	; 0x1008 <dtoa_prf+0xd4>
     f90:	91 11       	cpse	r25, r1
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <dtoa_prf+0x64>
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <dtoa_prf+0x66>
     f98:	84 e0       	ldi	r24, 0x04	; 4
     f9a:	81 17       	cp	r24, r17
     f9c:	18 f4       	brcc	.+6      	; 0xfa4 <dtoa_prf+0x70>
     f9e:	21 2f       	mov	r18, r17
     fa0:	28 1b       	sub	r18, r24
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <dtoa_prf+0x72>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	51 11       	cpse	r21, r1
     fa8:	0b c0       	rjmp	.+22     	; 0xfc0 <dtoa_prf+0x8c>
     faa:	f6 01       	movw	r30, r12
     fac:	82 2f       	mov	r24, r18
     fae:	30 e2       	ldi	r19, 0x20	; 32
     fb0:	88 23       	and	r24, r24
     fb2:	19 f0       	breq	.+6      	; 0xfba <dtoa_prf+0x86>
     fb4:	31 93       	st	Z+, r19
     fb6:	81 50       	subi	r24, 0x01	; 1
     fb8:	fb cf       	rjmp	.-10     	; 0xfb0 <dtoa_prf+0x7c>
     fba:	c2 0e       	add	r12, r18
     fbc:	d1 1c       	adc	r13, r1
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	99 23       	and	r25, r25
     fc2:	29 f0       	breq	.+10     	; 0xfce <dtoa_prf+0x9a>
     fc4:	d6 01       	movw	r26, r12
     fc6:	9c 93       	st	X, r25
     fc8:	f6 01       	movw	r30, r12
     fca:	31 96       	adiw	r30, 0x01	; 1
     fcc:	6f 01       	movw	r12, r30
     fce:	c6 01       	movw	r24, r12
     fd0:	03 96       	adiw	r24, 0x03	; 3
     fd2:	e2 fe       	sbrs	r14, 2
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <dtoa_prf+0xb6>
     fd6:	3e e4       	ldi	r19, 0x4E	; 78
     fd8:	d6 01       	movw	r26, r12
     fda:	3c 93       	st	X, r19
     fdc:	41 e4       	ldi	r20, 0x41	; 65
     fde:	11 96       	adiw	r26, 0x01	; 1
     fe0:	4c 93       	st	X, r20
     fe2:	11 97       	sbiw	r26, 0x01	; 1
     fe4:	12 96       	adiw	r26, 0x02	; 2
     fe6:	3c 93       	st	X, r19
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <dtoa_prf+0xc2>
     fea:	3e e6       	ldi	r19, 0x6E	; 110
     fec:	f6 01       	movw	r30, r12
     fee:	30 83       	st	Z, r19
     ff0:	41 e6       	ldi	r20, 0x61	; 97
     ff2:	41 83       	std	Z+1, r20	; 0x01
     ff4:	32 83       	std	Z+2, r19	; 0x02
     ff6:	fc 01       	movw	r30, r24
     ff8:	32 2f       	mov	r19, r18
     ffa:	40 e2       	ldi	r20, 0x20	; 32
     ffc:	33 23       	and	r19, r19
     ffe:	09 f4       	brne	.+2      	; 0x1002 <dtoa_prf+0xce>
    1000:	42 c0       	rjmp	.+132    	; 0x1086 <dtoa_prf+0x152>
    1002:	41 93       	st	Z+, r20
    1004:	31 50       	subi	r19, 0x01	; 1
    1006:	fa cf       	rjmp	.-12     	; 0xffc <dtoa_prf+0xc8>
    1008:	42 ff       	sbrs	r20, 2
    100a:	44 c0       	rjmp	.+136    	; 0x1094 <dtoa_prf+0x160>
    100c:	91 11       	cpse	r25, r1
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <dtoa_prf+0xe0>
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <dtoa_prf+0xe2>
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	81 17       	cp	r24, r17
    1018:	18 f4       	brcc	.+6      	; 0x1020 <dtoa_prf+0xec>
    101a:	21 2f       	mov	r18, r17
    101c:	28 1b       	sub	r18, r24
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <dtoa_prf+0xee>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	51 11       	cpse	r21, r1
    1024:	0b c0       	rjmp	.+22     	; 0x103c <dtoa_prf+0x108>
    1026:	f6 01       	movw	r30, r12
    1028:	82 2f       	mov	r24, r18
    102a:	30 e2       	ldi	r19, 0x20	; 32
    102c:	88 23       	and	r24, r24
    102e:	19 f0       	breq	.+6      	; 0x1036 <dtoa_prf+0x102>
    1030:	31 93       	st	Z+, r19
    1032:	81 50       	subi	r24, 0x01	; 1
    1034:	fb cf       	rjmp	.-10     	; 0x102c <dtoa_prf+0xf8>
    1036:	c2 0e       	add	r12, r18
    1038:	d1 1c       	adc	r13, r1
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	99 23       	and	r25, r25
    103e:	29 f0       	breq	.+10     	; 0x104a <dtoa_prf+0x116>
    1040:	d6 01       	movw	r26, r12
    1042:	9c 93       	st	X, r25
    1044:	f6 01       	movw	r30, r12
    1046:	31 96       	adiw	r30, 0x01	; 1
    1048:	6f 01       	movw	r12, r30
    104a:	c6 01       	movw	r24, r12
    104c:	03 96       	adiw	r24, 0x03	; 3
    104e:	e2 fe       	sbrs	r14, 2
    1050:	0b c0       	rjmp	.+22     	; 0x1068 <dtoa_prf+0x134>
    1052:	39 e4       	ldi	r19, 0x49	; 73
    1054:	d6 01       	movw	r26, r12
    1056:	3c 93       	st	X, r19
    1058:	3e e4       	ldi	r19, 0x4E	; 78
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	3c 93       	st	X, r19
    105e:	11 97       	sbiw	r26, 0x01	; 1
    1060:	36 e4       	ldi	r19, 0x46	; 70
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	3c 93       	st	X, r19
    1066:	07 c0       	rjmp	.+14     	; 0x1076 <dtoa_prf+0x142>
    1068:	39 e6       	ldi	r19, 0x69	; 105
    106a:	f6 01       	movw	r30, r12
    106c:	30 83       	st	Z, r19
    106e:	3e e6       	ldi	r19, 0x6E	; 110
    1070:	31 83       	std	Z+1, r19	; 0x01
    1072:	36 e6       	ldi	r19, 0x66	; 102
    1074:	32 83       	std	Z+2, r19	; 0x02
    1076:	fc 01       	movw	r30, r24
    1078:	32 2f       	mov	r19, r18
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	33 23       	and	r19, r19
    107e:	19 f0       	breq	.+6      	; 0x1086 <dtoa_prf+0x152>
    1080:	41 93       	st	Z+, r20
    1082:	31 50       	subi	r19, 0x01	; 1
    1084:	fb cf       	rjmp	.-10     	; 0x107c <dtoa_prf+0x148>
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f1 1d       	adc	r31, r1
    108c:	10 82       	st	Z, r1
    108e:	8e ef       	ldi	r24, 0xFE	; 254
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	a6 c0       	rjmp	.+332    	; 0x11e0 <dtoa_prf+0x2ac>
    1094:	21 e0       	ldi	r18, 0x01	; 1
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	91 11       	cpse	r25, r1
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <dtoa_prf+0x16c>
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	1c f4       	brge	.+6      	; 0x10ac <dtoa_prf+0x178>
    10a6:	fb 01       	movw	r30, r22
    10a8:	31 96       	adiw	r30, 0x01	; 1
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <dtoa_prf+0x17c>
    10ac:	e1 e0       	ldi	r30, 0x01	; 1
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	2e 0f       	add	r18, r30
    10b2:	3f 1f       	adc	r19, r31
    10b4:	bb 20       	and	r11, r11
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <dtoa_prf+0x18c>
    10b8:	eb 2d       	mov	r30, r11
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	31 96       	adiw	r30, 0x01	; 1
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <dtoa_prf+0x190>
    10c0:	e0 e0       	ldi	r30, 0x00	; 0
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	2e 0f       	add	r18, r30
    10c6:	3f 1f       	adc	r19, r31
    10c8:	e1 2f       	mov	r30, r17
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	2e 17       	cp	r18, r30
    10ce:	3f 07       	cpc	r19, r31
    10d0:	1c f4       	brge	.+6      	; 0x10d8 <dtoa_prf+0x1a4>
    10d2:	12 1b       	sub	r17, r18
    10d4:	21 2f       	mov	r18, r17
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <dtoa_prf+0x1a6>
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	8e 2d       	mov	r24, r14
    10dc:	88 71       	andi	r24, 0x18	; 24
    10de:	59 f4       	brne	.+22     	; 0x10f6 <dtoa_prf+0x1c2>
    10e0:	f6 01       	movw	r30, r12
    10e2:	82 2f       	mov	r24, r18
    10e4:	30 e2       	ldi	r19, 0x20	; 32
    10e6:	88 23       	and	r24, r24
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <dtoa_prf+0x1bc>
    10ea:	31 93       	st	Z+, r19
    10ec:	81 50       	subi	r24, 0x01	; 1
    10ee:	fb cf       	rjmp	.-10     	; 0x10e6 <dtoa_prf+0x1b2>
    10f0:	c2 0e       	add	r12, r18
    10f2:	d1 1c       	adc	r13, r1
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	99 23       	and	r25, r25
    10f8:	29 f0       	breq	.+10     	; 0x1104 <dtoa_prf+0x1d0>
    10fa:	d6 01       	movw	r26, r12
    10fc:	9c 93       	st	X, r25
    10fe:	f6 01       	movw	r30, r12
    1100:	31 96       	adiw	r30, 0x01	; 1
    1102:	6f 01       	movw	r12, r30
    1104:	51 11       	cpse	r21, r1
    1106:	0b c0       	rjmp	.+22     	; 0x111e <dtoa_prf+0x1ea>
    1108:	f6 01       	movw	r30, r12
    110a:	82 2f       	mov	r24, r18
    110c:	90 e3       	ldi	r25, 0x30	; 48
    110e:	88 23       	and	r24, r24
    1110:	19 f0       	breq	.+6      	; 0x1118 <dtoa_prf+0x1e4>
    1112:	91 93       	st	Z+, r25
    1114:	81 50       	subi	r24, 0x01	; 1
    1116:	fb cf       	rjmp	.-10     	; 0x110e <dtoa_prf+0x1da>
    1118:	c2 0e       	add	r12, r18
    111a:	d1 1c       	adc	r13, r1
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	0f 2d       	mov	r16, r15
    1120:	06 0f       	add	r16, r22
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	34 2f       	mov	r19, r20
    1126:	30 71       	andi	r19, 0x10	; 16
    1128:	44 ff       	sbrs	r20, 4
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <dtoa_prf+0x1fe>
    112c:	91 33       	cpi	r25, 0x31	; 49
    112e:	09 f4       	brne	.+2      	; 0x1132 <dtoa_prf+0x1fe>
    1130:	01 50       	subi	r16, 0x01	; 1
    1132:	10 16       	cp	r1, r16
    1134:	24 f4       	brge	.+8      	; 0x113e <dtoa_prf+0x20a>
    1136:	09 30       	cpi	r16, 0x09	; 9
    1138:	18 f0       	brcs	.+6      	; 0x1140 <dtoa_prf+0x20c>
    113a:	08 e0       	ldi	r16, 0x08	; 8
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <dtoa_prf+0x20c>
    113e:	01 e0       	ldi	r16, 0x01	; 1
    1140:	ab 01       	movw	r20, r22
    1142:	77 ff       	sbrs	r23, 7
    1144:	02 c0       	rjmp	.+4      	; 0x114a <dtoa_prf+0x216>
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	fb 01       	movw	r30, r22
    114c:	e4 1b       	sub	r30, r20
    114e:	f5 0b       	sbc	r31, r21
    1150:	a1 e0       	ldi	r26, 0x01	; 1
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ac 0f       	add	r26, r28
    1156:	bd 1f       	adc	r27, r29
    1158:	ea 0f       	add	r30, r26
    115a:	fb 1f       	adc	r31, r27
    115c:	8e e2       	ldi	r24, 0x2E	; 46
    115e:	a8 2e       	mov	r10, r24
    1160:	4b 01       	movw	r8, r22
    1162:	80 1a       	sub	r8, r16
    1164:	91 08       	sbc	r9, r1
    1166:	0b 2d       	mov	r16, r11
    1168:	10 e0       	ldi	r17, 0x00	; 0
    116a:	11 95       	neg	r17
    116c:	01 95       	neg	r16
    116e:	11 09       	sbc	r17, r1
    1170:	4f 3f       	cpi	r20, 0xFF	; 255
    1172:	bf ef       	ldi	r27, 0xFF	; 255
    1174:	5b 07       	cpc	r21, r27
    1176:	21 f4       	brne	.+8      	; 0x1180 <dtoa_prf+0x24c>
    1178:	d6 01       	movw	r26, r12
    117a:	ac 92       	st	X, r10
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	6d 01       	movw	r12, r26
    1180:	64 17       	cp	r22, r20
    1182:	75 07       	cpc	r23, r21
    1184:	2c f0       	brlt	.+10     	; 0x1190 <dtoa_prf+0x25c>
    1186:	84 16       	cp	r8, r20
    1188:	95 06       	cpc	r9, r21
    118a:	14 f4       	brge	.+4      	; 0x1190 <dtoa_prf+0x25c>
    118c:	81 81       	ldd	r24, Z+1	; 0x01
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <dtoa_prf+0x25e>
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	41 50       	subi	r20, 0x01	; 1
    1194:	51 09       	sbc	r21, r1
    1196:	31 96       	adiw	r30, 0x01	; 1
    1198:	d6 01       	movw	r26, r12
    119a:	11 96       	adiw	r26, 0x01	; 1
    119c:	7d 01       	movw	r14, r26
    119e:	40 17       	cp	r20, r16
    11a0:	51 07       	cpc	r21, r17
    11a2:	24 f0       	brlt	.+8      	; 0x11ac <dtoa_prf+0x278>
    11a4:	d6 01       	movw	r26, r12
    11a6:	8c 93       	st	X, r24
    11a8:	67 01       	movw	r12, r14
    11aa:	e2 cf       	rjmp	.-60     	; 0x1170 <dtoa_prf+0x23c>
    11ac:	64 17       	cp	r22, r20
    11ae:	75 07       	cpc	r23, r21
    11b0:	39 f4       	brne	.+14     	; 0x11c0 <dtoa_prf+0x28c>
    11b2:	96 33       	cpi	r25, 0x36	; 54
    11b4:	20 f4       	brcc	.+8      	; 0x11be <dtoa_prf+0x28a>
    11b6:	95 33       	cpi	r25, 0x35	; 53
    11b8:	19 f4       	brne	.+6      	; 0x11c0 <dtoa_prf+0x28c>
    11ba:	31 11       	cpse	r19, r1
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <dtoa_prf+0x28c>
    11be:	81 e3       	ldi	r24, 0x31	; 49
    11c0:	f6 01       	movw	r30, r12
    11c2:	80 83       	st	Z, r24
    11c4:	f7 01       	movw	r30, r14
    11c6:	82 2f       	mov	r24, r18
    11c8:	90 e2       	ldi	r25, 0x20	; 32
    11ca:	88 23       	and	r24, r24
    11cc:	19 f0       	breq	.+6      	; 0x11d4 <dtoa_prf+0x2a0>
    11ce:	91 93       	st	Z+, r25
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	fb cf       	rjmp	.-10     	; 0x11ca <dtoa_prf+0x296>
    11d4:	f7 01       	movw	r30, r14
    11d6:	e2 0f       	add	r30, r18
    11d8:	f1 1d       	adc	r31, r1
    11da:	10 82       	st	Z, r1
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	29 96       	adiw	r28, 0x09	; 9
    11e2:	ec e0       	ldi	r30, 0x0C	; 12
    11e4:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__epilogue_restores__+0xc>

000011e8 <__ftoa_engine>:
    11e8:	28 30       	cpi	r18, 0x08	; 8
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <__ftoa_engine+0x6>
    11ec:	27 e0       	ldi	r18, 0x07	; 7
    11ee:	33 27       	eor	r19, r19
    11f0:	da 01       	movw	r26, r20
    11f2:	99 0f       	add	r25, r25
    11f4:	31 1d       	adc	r19, r1
    11f6:	87 fd       	sbrc	r24, 7
    11f8:	91 60       	ori	r25, 0x01	; 1
    11fa:	00 96       	adiw	r24, 0x00	; 0
    11fc:	61 05       	cpc	r22, r1
    11fe:	71 05       	cpc	r23, r1
    1200:	39 f4       	brne	.+14     	; 0x1210 <__ftoa_engine+0x28>
    1202:	32 60       	ori	r19, 0x02	; 2
    1204:	2e 5f       	subi	r18, 0xFE	; 254
    1206:	3d 93       	st	X+, r19
    1208:	30 e3       	ldi	r19, 0x30	; 48
    120a:	2a 95       	dec	r18
    120c:	e1 f7       	brne	.-8      	; 0x1206 <__ftoa_engine+0x1e>
    120e:	08 95       	ret
    1210:	9f 3f       	cpi	r25, 0xFF	; 255
    1212:	30 f0       	brcs	.+12     	; 0x1220 <__ftoa_engine+0x38>
    1214:	80 38       	cpi	r24, 0x80	; 128
    1216:	71 05       	cpc	r23, r1
    1218:	61 05       	cpc	r22, r1
    121a:	09 f0       	breq	.+2      	; 0x121e <__ftoa_engine+0x36>
    121c:	3c 5f       	subi	r19, 0xFC	; 252
    121e:	3c 5f       	subi	r19, 0xFC	; 252
    1220:	3d 93       	st	X+, r19
    1222:	91 30       	cpi	r25, 0x01	; 1
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__ftoa_engine+0x40>
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	91 1d       	adc	r25, r1
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	1f 93       	push	r17
    1230:	0f 93       	push	r16
    1232:	ff 92       	push	r15
    1234:	ef 92       	push	r14
    1236:	19 2f       	mov	r17, r25
    1238:	98 7f       	andi	r25, 0xF8	; 248
    123a:	96 95       	lsr	r25
    123c:	e9 2f       	mov	r30, r25
    123e:	96 95       	lsr	r25
    1240:	96 95       	lsr	r25
    1242:	e9 0f       	add	r30, r25
    1244:	ff 27       	eor	r31, r31
    1246:	e2 5f       	subi	r30, 0xF2	; 242
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	99 27       	eor	r25, r25
    124c:	33 27       	eor	r19, r19
    124e:	ee 24       	eor	r14, r14
    1250:	ff 24       	eor	r15, r15
    1252:	a7 01       	movw	r20, r14
    1254:	e7 01       	movw	r28, r14
    1256:	05 90       	lpm	r0, Z+
    1258:	08 94       	sec
    125a:	07 94       	ror	r0
    125c:	28 f4       	brcc	.+10     	; 0x1268 <__ftoa_engine+0x80>
    125e:	36 0f       	add	r19, r22
    1260:	e7 1e       	adc	r14, r23
    1262:	f8 1e       	adc	r15, r24
    1264:	49 1f       	adc	r20, r25
    1266:	51 1d       	adc	r21, r1
    1268:	66 0f       	add	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	06 94       	lsr	r0
    1272:	a1 f7       	brne	.-24     	; 0x125c <__ftoa_engine+0x74>
    1274:	05 90       	lpm	r0, Z+
    1276:	07 94       	ror	r0
    1278:	28 f4       	brcc	.+10     	; 0x1284 <__ftoa_engine+0x9c>
    127a:	e7 0e       	add	r14, r23
    127c:	f8 1e       	adc	r15, r24
    127e:	49 1f       	adc	r20, r25
    1280:	56 1f       	adc	r21, r22
    1282:	c1 1d       	adc	r28, r1
    1284:	77 0f       	add	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	66 1f       	adc	r22, r22
    128c:	06 94       	lsr	r0
    128e:	a1 f7       	brne	.-24     	; 0x1278 <__ftoa_engine+0x90>
    1290:	05 90       	lpm	r0, Z+
    1292:	07 94       	ror	r0
    1294:	28 f4       	brcc	.+10     	; 0x12a0 <__ftoa_engine+0xb8>
    1296:	f8 0e       	add	r15, r24
    1298:	49 1f       	adc	r20, r25
    129a:	56 1f       	adc	r21, r22
    129c:	c7 1f       	adc	r28, r23
    129e:	d1 1d       	adc	r29, r1
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	06 94       	lsr	r0
    12aa:	a1 f7       	brne	.-24     	; 0x1294 <__ftoa_engine+0xac>
    12ac:	05 90       	lpm	r0, Z+
    12ae:	07 94       	ror	r0
    12b0:	20 f4       	brcc	.+8      	; 0x12ba <__ftoa_engine+0xd2>
    12b2:	49 0f       	add	r20, r25
    12b4:	56 1f       	adc	r21, r22
    12b6:	c7 1f       	adc	r28, r23
    12b8:	d8 1f       	adc	r29, r24
    12ba:	99 0f       	add	r25, r25
    12bc:	66 1f       	adc	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	06 94       	lsr	r0
    12c4:	a9 f7       	brne	.-22     	; 0x12b0 <__ftoa_engine+0xc8>
    12c6:	84 91       	lpm	r24, Z
    12c8:	10 95       	com	r17
    12ca:	17 70       	andi	r17, 0x07	; 7
    12cc:	41 f0       	breq	.+16     	; 0x12de <__ftoa_engine+0xf6>
    12ce:	d6 95       	lsr	r29
    12d0:	c7 95       	ror	r28
    12d2:	57 95       	ror	r21
    12d4:	47 95       	ror	r20
    12d6:	f7 94       	ror	r15
    12d8:	e7 94       	ror	r14
    12da:	1a 95       	dec	r17
    12dc:	c1 f7       	brne	.-16     	; 0x12ce <__ftoa_engine+0xe6>
    12de:	e4 eb       	ldi	r30, 0xB4	; 180
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	68 94       	set
    12e4:	15 90       	lpm	r1, Z+
    12e6:	15 91       	lpm	r17, Z+
    12e8:	35 91       	lpm	r19, Z+
    12ea:	65 91       	lpm	r22, Z+
    12ec:	95 91       	lpm	r25, Z+
    12ee:	05 90       	lpm	r0, Z+
    12f0:	7f e2       	ldi	r23, 0x2F	; 47
    12f2:	73 95       	inc	r23
    12f4:	e1 18       	sub	r14, r1
    12f6:	f1 0a       	sbc	r15, r17
    12f8:	43 0b       	sbc	r20, r19
    12fa:	56 0b       	sbc	r21, r22
    12fc:	c9 0b       	sbc	r28, r25
    12fe:	d0 09       	sbc	r29, r0
    1300:	c0 f7       	brcc	.-16     	; 0x12f2 <__ftoa_engine+0x10a>
    1302:	e1 0c       	add	r14, r1
    1304:	f1 1e       	adc	r15, r17
    1306:	43 1f       	adc	r20, r19
    1308:	56 1f       	adc	r21, r22
    130a:	c9 1f       	adc	r28, r25
    130c:	d0 1d       	adc	r29, r0
    130e:	7e f4       	brtc	.+30     	; 0x132e <__ftoa_engine+0x146>
    1310:	70 33       	cpi	r23, 0x30	; 48
    1312:	11 f4       	brne	.+4      	; 0x1318 <__ftoa_engine+0x130>
    1314:	8a 95       	dec	r24
    1316:	e6 cf       	rjmp	.-52     	; 0x12e4 <__ftoa_engine+0xfc>
    1318:	e8 94       	clt
    131a:	01 50       	subi	r16, 0x01	; 1
    131c:	30 f0       	brcs	.+12     	; 0x132a <__ftoa_engine+0x142>
    131e:	08 0f       	add	r16, r24
    1320:	0a f4       	brpl	.+2      	; 0x1324 <__ftoa_engine+0x13c>
    1322:	00 27       	eor	r16, r16
    1324:	02 17       	cp	r16, r18
    1326:	08 f4       	brcc	.+2      	; 0x132a <__ftoa_engine+0x142>
    1328:	20 2f       	mov	r18, r16
    132a:	23 95       	inc	r18
    132c:	02 2f       	mov	r16, r18
    132e:	7a 33       	cpi	r23, 0x3A	; 58
    1330:	28 f0       	brcs	.+10     	; 0x133c <__ftoa_engine+0x154>
    1332:	79 e3       	ldi	r23, 0x39	; 57
    1334:	7d 93       	st	X+, r23
    1336:	2a 95       	dec	r18
    1338:	e9 f7       	brne	.-6      	; 0x1334 <__ftoa_engine+0x14c>
    133a:	10 c0       	rjmp	.+32     	; 0x135c <__ftoa_engine+0x174>
    133c:	7d 93       	st	X+, r23
    133e:	2a 95       	dec	r18
    1340:	89 f6       	brne	.-94     	; 0x12e4 <__ftoa_engine+0xfc>
    1342:	06 94       	lsr	r0
    1344:	97 95       	ror	r25
    1346:	67 95       	ror	r22
    1348:	37 95       	ror	r19
    134a:	17 95       	ror	r17
    134c:	17 94       	ror	r1
    134e:	e1 18       	sub	r14, r1
    1350:	f1 0a       	sbc	r15, r17
    1352:	43 0b       	sbc	r20, r19
    1354:	56 0b       	sbc	r21, r22
    1356:	c9 0b       	sbc	r28, r25
    1358:	d0 09       	sbc	r29, r0
    135a:	98 f0       	brcs	.+38     	; 0x1382 <__ftoa_engine+0x19a>
    135c:	23 95       	inc	r18
    135e:	7e 91       	ld	r23, -X
    1360:	73 95       	inc	r23
    1362:	7a 33       	cpi	r23, 0x3A	; 58
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__ftoa_engine+0x180>
    1366:	70 e3       	ldi	r23, 0x30	; 48
    1368:	7c 93       	st	X, r23
    136a:	20 13       	cpse	r18, r16
    136c:	b8 f7       	brcc	.-18     	; 0x135c <__ftoa_engine+0x174>
    136e:	7e 91       	ld	r23, -X
    1370:	70 61       	ori	r23, 0x10	; 16
    1372:	7d 93       	st	X+, r23
    1374:	30 f0       	brcs	.+12     	; 0x1382 <__ftoa_engine+0x19a>
    1376:	83 95       	inc	r24
    1378:	71 e3       	ldi	r23, 0x31	; 49
    137a:	7d 93       	st	X+, r23
    137c:	70 e3       	ldi	r23, 0x30	; 48
    137e:	2a 95       	dec	r18
    1380:	e1 f7       	brne	.-8      	; 0x137a <__ftoa_engine+0x192>
    1382:	11 24       	eor	r1, r1
    1384:	ef 90       	pop	r14
    1386:	ff 90       	pop	r15
    1388:	0f 91       	pop	r16
    138a:	1f 91       	pop	r17
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	99 27       	eor	r25, r25
    1392:	87 fd       	sbrc	r24, 7
    1394:	90 95       	com	r25
    1396:	08 95       	ret

00001398 <strnlen_P>:
    1398:	fc 01       	movw	r30, r24
    139a:	05 90       	lpm	r0, Z+
    139c:	61 50       	subi	r22, 0x01	; 1
    139e:	70 40       	sbci	r23, 0x00	; 0
    13a0:	01 10       	cpse	r0, r1
    13a2:	d8 f7       	brcc	.-10     	; 0x139a <strnlen_P+0x2>
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	8e 0f       	add	r24, r30
    13aa:	9f 1f       	adc	r25, r31
    13ac:	08 95       	ret

000013ae <strnlen>:
    13ae:	fc 01       	movw	r30, r24
    13b0:	61 50       	subi	r22, 0x01	; 1
    13b2:	70 40       	sbci	r23, 0x00	; 0
    13b4:	01 90       	ld	r0, Z+
    13b6:	01 10       	cpse	r0, r1
    13b8:	d8 f7       	brcc	.-10     	; 0x13b0 <strnlen+0x2>
    13ba:	80 95       	com	r24
    13bc:	90 95       	com	r25
    13be:	8e 0f       	add	r24, r30
    13c0:	9f 1f       	adc	r25, r31
    13c2:	08 95       	ret

000013c4 <fputc>:
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	fb 01       	movw	r30, r22
    13ce:	23 81       	ldd	r18, Z+3	; 0x03
    13d0:	21 fd       	sbrc	r18, 1
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <fputc+0x16>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	9f ef       	ldi	r25, 0xFF	; 255
    13d8:	2c c0       	rjmp	.+88     	; 0x1432 <fputc+0x6e>
    13da:	22 ff       	sbrs	r18, 2
    13dc:	16 c0       	rjmp	.+44     	; 0x140a <fputc+0x46>
    13de:	46 81       	ldd	r20, Z+6	; 0x06
    13e0:	57 81       	ldd	r21, Z+7	; 0x07
    13e2:	24 81       	ldd	r18, Z+4	; 0x04
    13e4:	35 81       	ldd	r19, Z+5	; 0x05
    13e6:	42 17       	cp	r20, r18
    13e8:	53 07       	cpc	r21, r19
    13ea:	44 f4       	brge	.+16     	; 0x13fc <fputc+0x38>
    13ec:	a0 81       	ld	r26, Z
    13ee:	b1 81       	ldd	r27, Z+1	; 0x01
    13f0:	9d 01       	movw	r18, r26
    13f2:	2f 5f       	subi	r18, 0xFF	; 255
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	31 83       	std	Z+1, r19	; 0x01
    13f8:	20 83       	st	Z, r18
    13fa:	8c 93       	st	X, r24
    13fc:	26 81       	ldd	r18, Z+6	; 0x06
    13fe:	37 81       	ldd	r19, Z+7	; 0x07
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	37 83       	std	Z+7, r19	; 0x07
    1406:	26 83       	std	Z+6, r18	; 0x06
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <fputc+0x6e>
    140a:	8b 01       	movw	r16, r22
    140c:	ec 01       	movw	r28, r24
    140e:	fb 01       	movw	r30, r22
    1410:	00 84       	ldd	r0, Z+8	; 0x08
    1412:	f1 85       	ldd	r31, Z+9	; 0x09
    1414:	e0 2d       	mov	r30, r0
    1416:	09 95       	icall
    1418:	89 2b       	or	r24, r25
    141a:	e1 f6       	brne	.-72     	; 0x13d4 <fputc+0x10>
    141c:	d8 01       	movw	r26, r16
    141e:	16 96       	adiw	r26, 0x06	; 6
    1420:	8d 91       	ld	r24, X+
    1422:	9c 91       	ld	r25, X
    1424:	17 97       	sbiw	r26, 0x07	; 7
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	17 96       	adiw	r26, 0x07	; 7
    142a:	9c 93       	st	X, r25
    142c:	8e 93       	st	-X, r24
    142e:	16 97       	sbiw	r26, 0x06	; 6
    1430:	ce 01       	movw	r24, r28
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <__ultoa_invert>:
    143c:	fa 01       	movw	r30, r20
    143e:	aa 27       	eor	r26, r26
    1440:	28 30       	cpi	r18, 0x08	; 8
    1442:	51 f1       	breq	.+84     	; 0x1498 <__ultoa_invert+0x5c>
    1444:	20 31       	cpi	r18, 0x10	; 16
    1446:	81 f1       	breq	.+96     	; 0x14a8 <__ultoa_invert+0x6c>
    1448:	e8 94       	clt
    144a:	6f 93       	push	r22
    144c:	6e 7f       	andi	r22, 0xFE	; 254
    144e:	6e 5f       	subi	r22, 0xFE	; 254
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	af 4f       	sbci	r26, 0xFF	; 255
    1458:	b1 e0       	ldi	r27, 0x01	; 1
    145a:	3e d0       	rcall	.+124    	; 0x14d8 <__ultoa_invert+0x9c>
    145c:	b4 e0       	ldi	r27, 0x04	; 4
    145e:	3c d0       	rcall	.+120    	; 0x14d8 <__ultoa_invert+0x9c>
    1460:	67 0f       	add	r22, r23
    1462:	78 1f       	adc	r23, r24
    1464:	89 1f       	adc	r24, r25
    1466:	9a 1f       	adc	r25, r26
    1468:	a1 1d       	adc	r26, r1
    146a:	68 0f       	add	r22, r24
    146c:	79 1f       	adc	r23, r25
    146e:	8a 1f       	adc	r24, r26
    1470:	91 1d       	adc	r25, r1
    1472:	a1 1d       	adc	r26, r1
    1474:	6a 0f       	add	r22, r26
    1476:	71 1d       	adc	r23, r1
    1478:	81 1d       	adc	r24, r1
    147a:	91 1d       	adc	r25, r1
    147c:	a1 1d       	adc	r26, r1
    147e:	20 d0       	rcall	.+64     	; 0x14c0 <__ultoa_invert+0x84>
    1480:	09 f4       	brne	.+2      	; 0x1484 <__ultoa_invert+0x48>
    1482:	68 94       	set
    1484:	3f 91       	pop	r19
    1486:	2a e0       	ldi	r18, 0x0A	; 10
    1488:	26 9f       	mul	r18, r22
    148a:	11 24       	eor	r1, r1
    148c:	30 19       	sub	r19, r0
    148e:	30 5d       	subi	r19, 0xD0	; 208
    1490:	31 93       	st	Z+, r19
    1492:	de f6       	brtc	.-74     	; 0x144a <__ultoa_invert+0xe>
    1494:	cf 01       	movw	r24, r30
    1496:	08 95       	ret
    1498:	46 2f       	mov	r20, r22
    149a:	47 70       	andi	r20, 0x07	; 7
    149c:	40 5d       	subi	r20, 0xD0	; 208
    149e:	41 93       	st	Z+, r20
    14a0:	b3 e0       	ldi	r27, 0x03	; 3
    14a2:	0f d0       	rcall	.+30     	; 0x14c2 <__ultoa_invert+0x86>
    14a4:	c9 f7       	brne	.-14     	; 0x1498 <__ultoa_invert+0x5c>
    14a6:	f6 cf       	rjmp	.-20     	; 0x1494 <__ultoa_invert+0x58>
    14a8:	46 2f       	mov	r20, r22
    14aa:	4f 70       	andi	r20, 0x0F	; 15
    14ac:	40 5d       	subi	r20, 0xD0	; 208
    14ae:	4a 33       	cpi	r20, 0x3A	; 58
    14b0:	18 f0       	brcs	.+6      	; 0x14b8 <__ultoa_invert+0x7c>
    14b2:	49 5d       	subi	r20, 0xD9	; 217
    14b4:	31 fd       	sbrc	r19, 1
    14b6:	40 52       	subi	r20, 0x20	; 32
    14b8:	41 93       	st	Z+, r20
    14ba:	02 d0       	rcall	.+4      	; 0x14c0 <__ultoa_invert+0x84>
    14bc:	a9 f7       	brne	.-22     	; 0x14a8 <__ultoa_invert+0x6c>
    14be:	ea cf       	rjmp	.-44     	; 0x1494 <__ultoa_invert+0x58>
    14c0:	b4 e0       	ldi	r27, 0x04	; 4
    14c2:	a6 95       	lsr	r26
    14c4:	97 95       	ror	r25
    14c6:	87 95       	ror	r24
    14c8:	77 95       	ror	r23
    14ca:	67 95       	ror	r22
    14cc:	ba 95       	dec	r27
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__ultoa_invert+0x86>
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	61 05       	cpc	r22, r1
    14d4:	71 05       	cpc	r23, r1
    14d6:	08 95       	ret
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	0a 2e       	mov	r0, r26
    14de:	06 94       	lsr	r0
    14e0:	57 95       	ror	r21
    14e2:	47 95       	ror	r20
    14e4:	37 95       	ror	r19
    14e6:	27 95       	ror	r18
    14e8:	ba 95       	dec	r27
    14ea:	c9 f7       	brne	.-14     	; 0x14de <__ultoa_invert+0xa2>
    14ec:	62 0f       	add	r22, r18
    14ee:	73 1f       	adc	r23, r19
    14f0:	84 1f       	adc	r24, r20
    14f2:	95 1f       	adc	r25, r21
    14f4:	a0 1d       	adc	r26, r0
    14f6:	08 95       	ret

000014f8 <__prologue_saves__>:
    14f8:	2f 92       	push	r2
    14fa:	3f 92       	push	r3
    14fc:	4f 92       	push	r4
    14fe:	5f 92       	push	r5
    1500:	6f 92       	push	r6
    1502:	7f 92       	push	r7
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	ca 1b       	sub	r28, r26
    1522:	db 0b       	sbc	r29, r27
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	09 94       	ijmp

00001530 <__epilogue_restores__>:
    1530:	2a 88       	ldd	r2, Y+18	; 0x12
    1532:	39 88       	ldd	r3, Y+17	; 0x11
    1534:	48 88       	ldd	r4, Y+16	; 0x10
    1536:	5f 84       	ldd	r5, Y+15	; 0x0f
    1538:	6e 84       	ldd	r6, Y+14	; 0x0e
    153a:	7d 84       	ldd	r7, Y+13	; 0x0d
    153c:	8c 84       	ldd	r8, Y+12	; 0x0c
    153e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1540:	aa 84       	ldd	r10, Y+10	; 0x0a
    1542:	b9 84       	ldd	r11, Y+9	; 0x09
    1544:	c8 84       	ldd	r12, Y+8	; 0x08
    1546:	df 80       	ldd	r13, Y+7	; 0x07
    1548:	ee 80       	ldd	r14, Y+6	; 0x06
    154a:	fd 80       	ldd	r15, Y+5	; 0x05
    154c:	0c 81       	ldd	r16, Y+4	; 0x04
    154e:	1b 81       	ldd	r17, Y+3	; 0x03
    1550:	aa 81       	ldd	r26, Y+2	; 0x02
    1552:	b9 81       	ldd	r27, Y+1	; 0x01
    1554:	ce 0f       	add	r28, r30
    1556:	d1 1d       	adc	r29, r1
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	ed 01       	movw	r28, r26
    1564:	08 95       	ret

00001566 <_exit>:
    1566:	f8 94       	cli

00001568 <__stop_program>:
    1568:	ff cf       	rjmp	.-2      	; 0x1568 <__stop_program>
